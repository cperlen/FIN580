return((fitted_val - data$Target[[indicies[i]]])^2)
})
return(mean(sq_errors))
}
#inputs is a list of the colnames of data you wish to use eg c('Vol'), kernelType should be either 'radial' or 'linear', k is
cross_validate_svm = function(data,inputs,kernelType){
train_indicies = which(data$Train == 1)
test_indicies = which(data$Train == 0)
#set up SVM
y = as.factor(data$'Y(t)'[train_indicies])
x_train = vector("list", length(inputs))
names(x_train) = inputs
x_test = vector("list", length(inputs))
names(x_test) = inputs
for(input in inputs){
x_train[[input]] = data[train_indicies,input]
x_test[[input]] = data[test_indicies,input]
}
x_train = as.data.frame(x_train)
x_test = as.data.frame(x_test)
df = x_train
df['Labels'] = y
#cross-validate svm to find optimal gamma, C
gamma_range = c(1)
if(kernelType == 'radial'){
gamma_range = c(.1,.5,1,2)
}
svm_tune = tune(svm, train.x= x_train, train.y= as.factor(df$Labels), kernel=kernelType, ranges=list(cost=10^(-2:1), gamma=gamma_range))
C_opt = svm_tune$best.model$cost
gamma_opt = svm_tune$best.model$gamma
svm_model = svm(as.factor(df$Labels) ~ ., data=df,kernel=kernelType, cost = C_opt, gamma = gamma_opt)
#predict on training data
fitted_tr_labels = as.numeric(predict(svm_model,x_train)) #predict entire training set
fitted_tr_labels[which(fitted_tr_labels == 1)] = -1 #outputs as factor so need to invert
fitted_tr_labels[which(fitted_tr_labels == 2)] = 1
#find best delta for the training data with fitted model
y_vals = data$Target[train_indicies] - data$Vol[train_indicies]
regressors = fitted_tr_labels * data$Vol[train_indicies]
ls_fit = lm(y_vals ~ regressors + 0)
delta_opt = ls_fit$coefficients[1] #delta is non-negative, however we will show results in both cases
delta_pos = max(delta_opt,0)
#use delta_opt to compute train and test mses
train_mse_opt = get_mse(data, fitted_tr_labels,train_indicies,delta_opt)
train_mse_pos = get_mse(data, fitted_tr_labels,train_indicies,delta_pos)
#accuracy of fit, for sanity check, make sure > 50%
train_acc = length(which(fitted_tr_labels == data$'Y(t)'[train_indicies]))/length(fitted_tr_labels)
#predict on test
fitted_test_labels = as.numeric(predict(svm_model,x_test)) #predict entire training set
fitted_test_labels[which(fitted_test_labels == 1)] = -1 #outputs as factor so need to invert
fitted_test_labels[which(fitted_test_labels == 2)] = 1
#compute test_mse
test_mse_opt = get_mse(data, fitted_test_labels,test_indicies,delta_opt)
test_mse_pos = get_mse(data, fitted_test_labels,test_indicies,delta_pos)
#accuracy of fit
test_acc = length(which(fitted_test_labels == data$'Y(t)'[test_indicies]))/length(fitted_test_labels)
#output results'
results = data.frame('C' = numeric(),'Gamma' = numeric(),'Train_Acc' = numeric(),'Test_Acc' = numeric(),'Delta_opt' = numeric(), 'Opt_Train_MSE' = numeric(), 'Opt_Test_Mse' = numeric(),'Delta' = numeric(),'Train_MSE' = numeric(), 'Test_MSE' = numeric())
results[1,] = list(C_opt, gamma_opt,train_acc,test_acc,delta_opt,train_mse_opt,test_mse_opt,delta_pos,train_mse_pos,test_mse_pos)
return(results)
}
run_svm_regression = function(data,inputs,kernelType){
results = data.frame('Currency' = character(), 'C' = numeric(), 'Gamma' = numeric() , 'train_Accuracy' = numeric(), 'test_Accuracy' = numeric(), 'Delta_opt' = numeric(), 'Opt_Train_MSE' = numeric(), 'Opt_Test_Mse' = numeric(),  'Delta' = numeric(), 'train_MSE' = numeric(),'test_MSE' = numeric(), stringsAsFactors = F)
pos = 1
for(curr in currencies){
temp_results = cross_validate_svm(data[[curr]],inputs,kernelType)
results[pos,] = list(curr,temp_results[1],temp_results[2],temp_results[3],temp_results[4],temp_results[5],temp_results[6],temp_results[7],temp_results[8],temp_results[9],temp_results[10])
pos = pos + 1
}
return(results)
}
daily_1d_results_linear = run_svm_regression(daily_data,c('Vol'), 'linear')
daily_1d_results_rbf = run_svm_regression(daily_data,c('Vol'),'radial')
daily_2d_results_linear = run_svm_regression(daily_data,c('Vol','Ret'), 'linear')
daily_2d_results_rbf = run_svm_regression(daily_data,c('Vol','Ret'), 'radial')
weekly_1d_results_linear = run_svm_regression(weekly_data,c('Vol'), 'linear')
weekly_1d_results_rbf = run_svm_regression(weekly_data,c('Vol'),'radial')
weekly_2d_results_linear = run_svm_regression(weekly_data,c('Vol','Ret'), 'linear')
weekly_2d_results_rbf = run_svm_regression(weekly_data,c('Vol','Ret'), 'radial')
#appends moving average over p vols and q rets
append_moving_avg = function(ts,p,q){
if(q != 0){
m_avg = data.frame('Date'=as.Date(character()), 'Vol' = numeric(), 'Train' = numeric(), 'Target' = numeric(), 'Ret' = numeric(), 'Y(t)' = numeric(), 'maVol' = numeric(),  maRet = numeric())
pos = 1
start = max(p,q)
for(i in start:nrow(ts)){
avgVol = mean(ts[(i-p+1):i,'Vol'])
avgRet = mean(ts[(i-q+1):i,'Ret'])
m_avg[pos,] = list(as.Date(ts[i,'Date']), ts[i,'Vol'], ts[i,'Train'], ts[i,'Target'], ts[i,'Ret'], ts[i,'Y(t)'],avgVol, avgRet)
pos = pos + 1
}
}
else{
m_avg = data.frame('Date'=as.Date(character()), 'Vol' = numeric(), 'Train' = numeric(), 'Target' = numeric(), 'Ret' = numeric(), 'Y(t)' = numeric(), 'maVol' = numeric())
pos = 1
start = max(p,q)
for(i in start:nrow(ts)){
avgVol = mean(ts[(i-p+1):i,'Vol'])
m_avg[pos,] = list(as.Date(ts[i,'Date']), ts[i,'Vol'], ts[i,'Train'], ts[i,'Target'], ts[i,'Ret'], ts[i,'Y(t)'],avgVol)
pos = pos + 1
}
}
colnames(m_avg)[1:6] = colnames(daily_data[['AUD']])
return(m_avg)
}
run_svm_moving_avg = function(data,kernelType){
look_back_p = c(3,5,10)
look_back_q = c(0,3,5,10)
results = data.frame('Currency' = character(), 'p' = numeric(), 'q' = numeric(), 'C' = numeric(), 'Gamma' = numeric() , 'train_Accuracy' = numeric(), 'test_Accuracy' = numeric(), 'Delta_opt' = numeric(), 'Opt_Train_MSE' = numeric(), 'Opt_Test_Mse' = numeric(),  'Delta' = numeric(), 'train_MSE' = numeric(),'test_MSE' = numeric(), stringsAsFactors = F)
pos = 1
for(curr in currencies){
for(p in look_back_p){
for(q in look_back_q){
if(q == 0){
inputs = c('maVol')
}
else{
inputs = c('maVol','maRet')
}
curr_data = append_moving_avg(data[[curr]],p,q)
temp_results = cross_validate_svm(curr_data,inputs,kernelType)
results[pos,] = list(curr,p,q,temp_results[1],temp_results[2],temp_results[3],temp_results[4],temp_results[5],temp_results[6],temp_results[7],temp_results[8],temp_results[9],temp_results[10])
pos = pos + 1
}
}
}
return(results)
}
daily_ma_results_linear = run_svm_moving_avg(daily_data,'linear')
daily_ma_results_rbf = run_svm_moving_avg(daily_data,'radial')
weekly_ma_results_linear = run_svm_moving_avg(weekly_data,'linear')
weekly_ma_results_rbf = run_svm_moving_avg(weekly_data,'radial')
weekly_ma_results_rbf
get_best_ma_results = function(data){
results = data.frame(Currency = character(), p = numeric(), q = numeric(), train_Accuracy = numeric(), test_Accuracy = numeric(), Train_MSE = numeric(), test_MSE = numeric() )
pos = 1
for(curr in currencies){
indicies = which(data$Currency == curr)
winner = data[which.min(data$train_Accuracy[indices]),]
results[pos,] = list(curr,winner['p'],winner['q'],winner['train_Accuracy'],winner['test_Accuracy'],winner['Opt_Train_MSE'],winner['Opt_Test_Mse'])
pos = pos + 1
}
return(results)
}
daily_best_ma_results_linear = get_best_ma_results(daily_ma_results_linear)
get_best_ma_results = function(data){
results = data.frame(Currency = character(), p = numeric(), q = numeric(), train_Accuracy = numeric(), test_Accuracy = numeric(), Train_MSE = numeric(), test_MSE = numeric() )
pos = 1
for(curr in currencies){
indicies = which(data$Currency == curr)
winner = data[which.max(data$train_Accuracy[indicies]),] #decision criterion, choose p,q that maximize train_Accuracy, issues with constant delta = 0 prevents train_MSE from being good decision
results[pos,] = list(curr,winner['p'],winner['q'],winner['train_Accuracy'],winner['test_Accuracy'],winner['Opt_Train_MSE'],winner['Opt_Test_Mse'])
pos = pos + 1
}
return(results)
}
daily_best_ma_results_linear = get_best_ma_results(daily_ma_results_linear)
get_best_ma_results = function(data){
results = data.frame(Currency = character(), p = numeric(), q = numeric(), train_Accuracy = numeric(), test_Accuracy = numeric(), Train_MSE = numeric(), test_MSE = numeric(), stringsAsFactors = F )
pos = 1
for(curr in currencies){
indicies = which(data$Currency == curr)
winner = data[which.max(data$train_Accuracy[indicies]),] #decision criterion, choose p,q that maximize train_Accuracy, issues with constant delta = 0 prevents train_MSE from being good decision
results[pos,] = list(curr,winner['p'],winner['q'],winner['train_Accuracy'],winner['test_Accuracy'],winner['Opt_Train_MSE'],winner['Opt_Test_Mse'])
pos = pos + 1
}
return(results)
}
daily_best_ma_results_linear = get_best_ma_results(daily_ma_results_linear)
daily_best_ma_results_rbg = get_best_ma_results(daily_ma_results_rbf)
daily_best_ma_results_rbg
daily_ma_results_linear
daily_best_ma_results_rbg
weekly_best_ma_results_linear = get_best_ma_results(weekly_ma_results_linear)
weekly_best_ma_results_rbg = get_best_ma_results(weekly_ma_results_rbf)
weekly_best_ma_results_rbg
weekly_best_ma_results_linear
weekly_ma_results_rbf
get_best_results = function(data){
results = data.frame(Currency = character(), train_Accuracy = numeric(), test_Accuracy = numeric(), Train_MSE = numeric(), test_MSE = numeric(), stringsAsFactors = F )
pos = 1
for(curr in currencies){
indicies = which(data$Currency == curr)
winner = data[which.max(data$train_Accuracy[indicies]),] #decision criterion, choose p,q that maximize train_Accuracy, issues with constant delta = 0 prevents train_MSE from being good decision
results[pos,] = list(curr,winner['train_Accuracy'],winner['test_Accuracy'],winner['Opt_Train_MSE'],winner['Opt_Test_Mse'])
pos = pos + 1
}
return(results)
}
daily_best_1d_results_linear = get_best_results(daily_1d_results_linear)
daily_best_1d_results_rbf = get_best_results(daily_1d_results_rbf)
daily_best_2d_results_linear = get_best_results(daily_2d_results_linear)
daily_best_2d_results_rbf = get_best_results(daily_2d_results_rbf)
weekly_best_1d_results_linear = get_best_results(weekly_1d_results_linear)
weekly_best_1d_results_rbf = get_best_results(weekly_1d_results_rbf)
weekly_best_2d_results_linear = get_best_results(weekly_2d_results_linear)
weekly_best_2d_results_rbf = get_best_results(weekly_2d_results_rbf)
daily_best_1d_results_linear
daily_1d_results_linear
daily_1d_results_linear['AUD']
daily_1d_results_linear$Currency['AUD']
daily_1d_results_linear$Currency
daily_1d_results_linear$Currecy == 'AUD'
which(daily_1d_results_linear$Currecy == 'AUD')
which(daily_1d_results_linear$Currency == 'AUD')
daily_ma_results_linear
weekly_1d_results_linear
for(result in daily_results){
tr_acc = rep(0,length(daily_results))
test_acc = rep(0,length(daily_results))
pos = 1
for(curr in currencies){
index = which(result$Currency == curr)
tr_acc[pos] = tr_acc[pos] + result[index,'train_Accuracy']
test_acc[pos] = test_acc[pos] + result[index,'test_Accuracy']
}
tr_acc[pos] = tr_acc[pos]/ length(currencies)
test_acc[pos] = test_acc[pos]/ length(currencies)
pos = pos + 1
}
daily_results = c(daily_1d_results_linear, daily_1d_results_rbf, daily_2d_results_linear,daily_2d_results_rbf,daily_best_ma_results_linear, daily_best_ma_results_rbg)
weekly_results = c(weekly_1d_results_linear, weekly_1d_results_rbf, weekly_2d_results_linear,weekly_2d_results_rbf,weekly_best_ma_results_linear, weekly_best_ma_results_rbg)
for(result in daily_results){
tr_acc = rep(0,length(daily_results))
test_acc = rep(0,length(daily_results))
pos = 1
for(curr in currencies){
index = which(result$Currency == curr)
tr_acc[pos] = tr_acc[pos] + result[index,'train_Accuracy']
test_acc[pos] = test_acc[pos] + result[index,'test_Accuracy']
}
tr_acc[pos] = tr_acc[pos]/ length(currencies)
test_acc[pos] = test_acc[pos]/ length(currencies)
pos = pos + 1
}
daily_results[1]
daily_results
daily_results[,1]
daily_results[[1]]
daily_results[[2]]
daily_results
daily_1d_results_linear
daily_1d_results_rbf
daily_results[[[1]]]
daily_results[[1]]
daily_results[,[1]]
daily_results[[1],]
daily_results
daily_results = list(daily_1d_results_linear, daily_1d_results_rbf, daily_2d_results_linear,daily_2d_results_rbf,daily_best_ma_results_linear, daily_best_ma_results_rbg)
daily_results
daily_results[[1]]
daily_results = list(daily_1d_results_linear, daily_1d_results_rbf, daily_2d_results_linear,daily_2d_results_rbf,daily_best_ma_results_linear, daily_best_ma_results_rbg)
weekly_results = list(weekly_1d_results_linear, weekly_1d_results_rbf, weekly_2d_results_linear,weekly_2d_results_rbf,weekly_best_ma_results_linear, weekly_best_ma_results_rbg)
for(result in daily_results){
tr_acc = rep(0,length(daily_results))
test_acc = rep(0,length(daily_results))
pos = 1
for(curr in currencies){
index = which(result$Currency == curr)
tr_acc[pos] = tr_acc[pos] + result[index,'train_Accuracy']
test_acc[pos] = test_acc[pos] + result[index,'test_Accuracy']
}
tr_acc[pos] = tr_acc[pos]/ length(currencies)
test_acc[pos] = test_acc[pos]/ length(currencies)
pos = pos + 1
}
daily_results[[1]]
daily_results[[1]][1,'train_Accuracy']
for(result in daily_results){
tr_acc = rep(0,length(daily_results))
test_acc = rep(0,length(daily_results))
pos = 1
for(curr in currencies){
index = which(result$Currency == curr)
tr_acc[pos] = tr_acc[pos] + as.numeric(result[index,'train_Accuracy'])
test_acc[pos] = test_acc[pos] + as.numeric(result[index,'test_Accuracy'])
}
tr_acc[pos] = tr_acc[pos]/ length(currencies)
test_acc[pos] = test_acc[pos]/ length(currencies)
pos = pos + 1
}
tr_acc
test_acc
length(daily_results)
tr_acc = rep(0,length(daily_results))
test_acc = rep(0,length(daily_results))
for(result in daily_results){
pos = 1
for(curr in currencies){
index = which(result$Currency == curr)
tr_acc[pos] = tr_acc[pos] + as.numeric(result[index,'train_Accuracy'])
test_acc[pos] = test_acc[pos] + as.numeric(result[index,'test_Accuracy'])
}
tr_acc[pos] = tr_acc[pos]/ length(currencies)
test_acc[pos] = test_acc[pos]/ length(currencies)
pos = pos + 1
}
tr_acc
tr_acc = rep(0,length(daily_results))
tr_acc
test_acc = rep(0,length(daily_results))
tr_acc = rep(0,length(daily_results))
test_acc = rep(0,length(daily_results))
for(i in 1:length(daily_results)){
result = daily_results[[i]]
pos = 1
for(curr in currencies){
index = which(result$Currency == curr)
tr_acc[pos] = tr_acc[pos] + as.numeric(result[index,'train_Accuracy'])
test_acc[pos] = test_acc[pos] + as.numeric(result[index,'test_Accuracy'])
}
tr_acc[pos] = tr_acc[pos]/ length(currencies)
test_acc[pos] = test_acc[pos]/ length(currencies)
pos = pos + 1
}
tr_acc
result = daily_results[[1]]
curr = 'AUD'
ndex = which(result$Currency == curr)
index = which(result$Currency == curr)
tr_acc[pos] = tr_acc[pos] + as.numeric(result[index,'train_Accuracy'])
tr_acc
pos
tr_acc = rep(0,length(daily_results))
test_acc = rep(0,length(daily_results))
result = daily_results[[i]]
tr_acc = rep(0,length(daily_results))
test_acc = rep(0,length(daily_results))
for(i in 1:length(daily_results)){
result = daily_results[[i]]
for(curr in currencies){
index = which(result$Currency == curr)
tr_acc[i] = tr_acc[i] + as.numeric(result[index,'train_Accuracy'])
test_acc[i] = test_acc[i] + as.numeric(result[index,'test_Accuracy'])
}
tr_acc[i] = tr_acc[i]/ length(currencies)
test_acc[i] = test_acc[i]/ length(currencies)
}
tr_acc
weekly_best_ma_results_linear
i=5
result = daily_results[[i]]
index = which(result$Currency == curr)
index
as.numeric(result[index,'train_Accuracy'])
daily_best_ma_results_linear
daily_best_ma_results_linear['train_Accuracy']
daily_best_ma_results_linear[7,'train_Accuracy']
as.numeric(daily_best_ma_results_linear[7,'train_Accuracy'])
daily_best_ma_results_linear[7,'train_Accuracy']
daily_best_ma_results_linear[7,'train_Accuracy']''
daily_best_ma_results_linear[7,'train_Accuracy'][1]
daily_best_ma_results_linear[7,'train_Accuracy'][[1]
]
daily_best_ma_results_linear[7,'train_Accuracy'][[[1]]]
daily_best_ma_results_linear[7,'train_Accuracy'][1]
daily_best_ma_results_linear[7,'train_Accuracy'][[1]]
as.numeric(daily_best_ma_results_linear[7,'train_Accuracy'][[1]])
tr_acc = rep(0,length(daily_results))
test_acc = rep(0,length(daily_results))
for(i in 1:length(daily_results)){
result = daily_results[[i]]
for(curr in currencies){
index = which(result$Currency == curr)
if(i < 5){
tr_acc[i] = tr_acc[i] + as.numeric(result[index,'train_Accuracy'])
test_acc[i] = test_acc[i] + as.numeric(result[index,'test_Accuracy'])
}
else{
tr_acc[i] = tr_acc[i] + as.numeric(result[index,'train_Accuracy'][[1]])
test_acc[i] = test_acc[i] + as.numeric(result[index,'test_Accuracy'][[1]])
}
}
tr_acc[i] = tr_acc[i]/ length(currencies)
test_acc[i] = test_acc[i]/ length(currencies)
}
tr_acc
test_acc
name = 'Aggregate Training Accuracy of Various Methods '
plot(daily_results, tr_acc, xlab = 'Method', ylab = 'Accuracy', main = name, pch = 21, bg = 'blue')
plot(methods, tr_acc, xlab = 'Method', ylab = 'Accuracy', main = name, pch = 21, bg = 'blue')
plot(1:length(methods), tr_acc, xlab = 'Method', ylab = 'Accuracy', main = name, pch = 21, bg = 'blue')
methods
methods = c('y(vol) linear','y(vol) rbf','y(vol,ret) linear','y(vol,ret) rbf', 'y(E_p(vol),E_q(vol)) linear','y(E_p(vol),E_q(vol)) rbf')
name = 'Aggregate Training Accuracy of Various Methods for Forecasting Daily Vol '
plot(1:length(methods), tr_acc, xlab = 'Method', ylab = 'Accuracy', main = name, pch = 21, bg = 'blue')
name = 'Aggregate Training Accuracy of Various Methods for Forecasting Daily Vol '
barplot(tr_acc, main=name, horiz=F, names.arg= methods, cex.names=0.8)
barplot(tr_acc, main=name, horiz=F, names.arg= methods)
barplot(tr_acc, main=name, horiz=F, names.arg= methods, cex.names=0.4)
barplot(tr_acc, main=name, horiz=F, names.arg= methods, cex.names=0.5)
barplot(tr_acc, main=name, horiz=F, names.arg= methods, cex.names=0.7)
barplot(tr_acc, main=name, horiz=F, names.arg= methods, cex.names=0.6)
barplot(tr_acc, main=name, horiz=F, names.arg= methods, cex.names=0.5)
barplot(tr_acc, main=name, horiz=F, names.arg= methods, cex.names=0.4)
barplot(tr_acc, main=name, horiz=F, names.arg= methods, cex.names=0.45)
barplot(tr_acc, main=name, horiz=F, names.arg= methods, cex.names=0.42)
barplot(tr_acc, main=name, horiz=F, names.arg= methods, cex.names=0.42, xlab = 'Method', ylab = 'Accuracy')
barplot(tr_acc, main=name, horiz=F, names.arg= methods, cex.names=0.42, xlab = 'Method', ylab = 'Accuracy', col=c("darkblue","red","cyan","orange","magenta", "purple"))
setwd("~/Desktop/FIN580/hw3/Plots/AggResults")
name = 'Aggregate Training Accuracy for Forecasting Daily Vol '
barplot(tr_acc, main=name, horiz=F, names.arg= methods, cex.names=0.42, xlab = 'Method', ylab = 'Accuracy', col=c("darkblue","red","cyan","orange","magenta", "purple"))
dev.copy(pdf,paste(name,".pdf",sep=""))
dev.off()
name = 'Aggregate Testing Accuracy for Forecasting Daily Vol '
barplot(test_acc, main=name, horiz=F, names.arg= methods, cex.names=0.42, xlab = 'Method', ylab = 'Accuracy', col=c("darkblue","red","cyan","orange","magenta", "purple"))
dev.copy(pdf,paste(name,".pdf",sep=""))
dev.off()
compile_accuracy = function(data){
tr_acc = rep(0,length(data))
test_acc = rep(0,length(data))
for(i in 1:length(data)){
result = data[[i]]
for(curr in currencies){
index = which(result$Currency == curr)
if(i < 5){
tr_acc[i] = tr_acc[i] + as.numeric(result[index,'train_Accuracy'])
test_acc[i] = test_acc[i] + as.numeric(result[index,'test_Accuracy'])
}
else{
tr_acc[i] = tr_acc[i] + as.numeric(result[index,'train_Accuracy'][[1]])
test_acc[i] = test_acc[i] + as.numeric(result[index,'test_Accuracy'][[1]])
}
}
tr_acc[i] = tr_acc[i]/ length(currencies)
test_acc[i] = test_acc[i]/ length(currencies)
}
return(c(tr_acc,test_acc))
}
compile_accuracy = function(data){
tr_acc = rep(0,length(data))
test_acc = rep(0,length(data))
for(i in 1:length(data)){
result = data[[i]]
for(curr in currencies){
index = which(result$Currency == curr)
if(i < 5){
tr_acc[i] = tr_acc[i] + as.numeric(result[index,'train_Accuracy'])
test_acc[i] = test_acc[i] + as.numeric(result[index,'test_Accuracy'])
}
else{
tr_acc[i] = tr_acc[i] + as.numeric(result[index,'train_Accuracy'][[1]])
test_acc[i] = test_acc[i] + as.numeric(result[index,'test_Accuracy'][[1]])
}
}
tr_acc[i] = tr_acc[i]/ length(currencies)
test_acc[i] = test_acc[i]/ length(currencies)
}
return(list(tr_acc,test_acc))
}
acc_results = compile_accuracy(daily_results)
acc_results
View(daily_best_ma_results_linear)
acc_results = compile_accuracy(weekly_results)
weekly_tr_acc = acc_results[[1]]
weekly_test_acc = acc_results[[2]]
name = 'Aggregate Training Accuracy for Forecasting Weekly Vol '
barplot(weekly_tr_acc, main=name, horiz=F, names.arg= methods, cex.names=0.42, xlab = 'Method', ylab = 'Accuracy', col=c("darkblue","red","cyan","orange","magenta", "purple"))
dev.copy(pdf,paste(name,".pdf",sep=""))
dev.off()
name = 'Aggregate Testing Accuracy for Forecasting Weekly Vol '
barplot(weekly_test_acc, main=name, horiz=F, names.arg= methods, cex.names=0.42, xlab = 'Method', ylab = 'Accuracy', col=c("darkblue","red","cyan","orange","magenta", "purple"))
dev.copy(pdf,paste(name,".pdf",sep=""))
dev.off()
daily_results
compile_mse = function(data){
tr_mse = rep(0,length(data))
test_mse = rep(0,length(data))
for(i in 1:length(data)){
result = data[[i]]
for(curr in currencies){
index = which(result$Currency == curr)
if(i < 5){
tr_mse[i] = tr_mse[i] + as.numeric(result[index,7])
test_mse[i] = test_mse[i] + as.numeric(result[index,8])
}
else{
tr_mse[i] = tr_mse[i] + as.numeric(result[index,6][[1]])
test_mse[i] = test_mse[i] + as.numeric(result[index,7][[1]])
}
}
tr_mse[i] = tr_mse[i]/ length(currencies)
test_mse[i] = test_mse[i]/ length(currencies)
}
return(list(tr_mse,test_mse))
}
mse_results = compile_accuracy(daily_results)
mse_results
mse_results = compile_mse(daily_results)
mse_results
weekly_ma_results_rbf
mse_results = compile_mse(daily_results)
daily_tr_mse = mse_results[[1]]
daily_test_mse = mse_results[[2]]
name = 'Aggregate Training MSE for Forecasting Daily Vol '
barplot(daily_tr_mse, main=name, horiz=F, names.arg= methods, cex.names=0.42, xlab = 'Method', ylab = 'Accuracy', col=c("darkblue","red","cyan","orange","magenta", "purple"))
dev.copy(pdf,paste(name,".pdf",sep=""))
dev.off()
name = 'Aggregate Testing MSE for Forecasting Daily Vol '
barplot(daily_test_mse, main=name, horiz=F, names.arg= methods, cex.names=0.42, xlab = 'Method', ylab = 'Accuracy', col=c("darkblue","red","cyan","orange","magenta", "purple"))
dev.copy(pdf,paste(name,".pdf",sep=""))
dev.off()
mse_results = compile_mse(weekly_results)
weekly_tr_mse = mse_results[[1]]
weekly_test_mse = mse_results[[2]]
name = 'Aggregate Training MSE for Forecasting Weekly Vol '
barplot(weekly_tr_mse, main=name, horiz=F, names.arg= methods, cex.names=0.42, xlab = 'Method', ylab = 'Accuracy', col=c("darkblue","red","cyan","orange","magenta", "purple"))
dev.copy(pdf,paste(name,".pdf",sep=""))
dev.off()
name = 'Aggregate Testing MSE for Forecasting Weekly Vol '
barplot(weekly_test_mse, main=name, horiz=F, names.arg= methods, cex.names=0.42, xlab = 'Method', ylab = 'Accuracy', col=c("darkblue","red","cyan","orange","magenta", "purple"))
dev.copy(pdf,paste(name,".pdf",sep=""))
dev.off()
