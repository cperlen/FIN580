c_model_coef = vector("list", ncol(train))
for(curr in 1:length(train)){
print(paste("curr is", curr))
c_testing_mse[[curr]] = matrix(0,nrow = length(ks),ncol = length(cs))
c_training_mse[[curr]] = matrix(0,nrow = length(ks),ncol = length(cs))
c_model_coef[[curr]] = vector("list", length(cs))
for(i in 1:length(cs)){
print(paste("i is", i))
c_model_coef[[curr]][[i]] = matrix(0,nrow = j,ncol = length(ks))
for(j in 1:length(ks)){
print(paste("k is", k ))
c_training_mse[[curr]][j,i] = knn_regression(train[,curr],ks[j],cs[i],nrow(tot_data))
c_testing_mse[[curr]][j,i] = knn_test_diag(tot_data[,curr],ks[j],cs[i],nrow(tot_data))
c_model_coef[[curr]][[i]][j,1:ks[j]] = get(paste("model_",k,sep=""))$coefficients
}
}
}
cs = seq(0,.4, .4/10)
ks = c(1,3,6,9,12,16,20)
c_training_mse = vector("list", ncol(train))
c_testing_mse = vector("list", ncol(train))
c_model_coef = vector("list", ncol(train))
for(curr in 1:length(train)){
print(paste("curr is", curr))
c_testing_mse[[curr]] = matrix(0,nrow = length(ks),ncol = length(cs))
c_training_mse[[curr]] = matrix(0,nrow = length(ks),ncol = length(cs))
c_model_coef[[curr]] = vector("list", length(cs))
for(i in 1:length(cs)){
print(paste("i is", i))
c_model_coef[[curr]][[i]] = matrix(0,nrow = length(ks),ncol = ks[length(ks)])
for(j in 1:length(ks)){
print(paste("k is", k ))
c_training_mse[[curr]][j,i] = knn_regression(train[,curr],ks[j],cs[i],nrow(tot_data))
c_testing_mse[[curr]][j,i] = knn_test_diag(tot_data[,curr],ks[j],cs[i],nrow(tot_data))
c_model_coef[[curr]][[i]][j,1:ks[j]] = get(paste("model_",k,sep=""))$coefficients
}
}
}
cs = seq(0,.4, .4/10)
ks = c(1,3,6,9,12,16,20)
c_training_mse = vector("list", ncol(train))
c_testing_mse = vector("list", ncol(train))
c_model_coef = vector("list", ncol(train))
for(curr in 1:length(train)){
print(paste("curr is", curr))
c_testing_mse[[curr]] = matrix(0,nrow = length(ks),ncol = length(cs))
c_training_mse[[curr]] = matrix(0,nrow = length(ks),ncol = length(cs))
c_model_coef[[curr]] = vector("list", length(cs))
for(i in 1:length(cs)){
print(paste("i is", i))
c_model_coef[[curr]][[i]] = matrix(0,nrow = length(ks),ncol = ks[length(ks)])
for(j in 1:length(ks)){
print(paste("k is", k ))
c_training_mse[[curr]][j,i] = knn_regression(train[,curr],ks[j],cs[i],nrow(tot_data))
c_testing_mse[[curr]][j,i] = knn_test_diag(tot_data[,curr],ks[j],cs[i],nrow(tot_data))
c_model_coef[[curr]][[i]][j,1:ks[j]] = get(paste("model_",ks[j],sep=""))$coefficients
}
}
}
cs = seq(0,.4, .4/10)
ks = c(1,3,6,9,12,16,20)
c_training_mse = vector("list", ncol(train))
c_testing_mse = vector("list", ncol(train))
c_model_coef = vector("list", ncol(train))
for(curr in 1:length(train)){
print(paste("curr is", curr))
c_testing_mse[[curr]] = matrix(0,nrow = length(ks),ncol = length(cs))
c_training_mse[[curr]] = matrix(0,nrow = length(ks),ncol = length(cs))
c_model_coef[[curr]] = vector("list", length(cs))
for(i in 1:length(cs)){
print(paste("i is", i))
c_model_coef[[curr]][[i]] = matrix(0,nrow = length(ks),ncol = ks[length(ks)])
for(j in 1:length(ks)){
print(paste("k is", ks[j] ))
c_training_mse[[curr]][j,i] = knn_regression(train[,curr],ks[j],cs[i],nrow(tot_data))
c_testing_mse[[curr]][j,i] = knn_test_diag(tot_data[,curr],ks[j],cs[i],nrow(tot_data))
c_model_coef[[curr]][[i]][j,1:ks[j]] = get(paste("model_",ks[j],sep=""))$coefficients
}
}
}
c_training_mse[[curr]]
c_training_mse[[curr-1]]
j
i
c_training_mse[[curr]][j,i]
c_testing_mse[[curr]][j,i]
c_model_coef[[curr]][[i]][j,1:ks[j]]
save.image("~/Desktop/FIN580/cost_penalty.RData")
comp_distance = function(x){
return((x[1]-origin[1])^2  + lam* (x[2]-origin[2])^2)
}
get_knn = function(center,slice,k){
origin <<- center
dist = apply(slice,1,comp_distance)
sorted = sort(dist,decreasing=F)[1:k]
indicies = sapply(seq(1,k), function(x) {which(dist == sorted[x])})
#indicies = c()
#for(j in 1:k){
# indicies[j] = which(dist == sorted[j])
#}
slice[length(slice) + 1] = origin[1]
return(slice[indicies+1]) #get what happened the next day
}
#function for fitting on training data
knn_regression = function(ts,k,lambda,lookBack){
START = 100
lam <<- lambda
time = c(seq(1,length(ts),1))
ts = cbind(ts, time)
regressors = matrix(nrow = nrow(ts)-START,ncol = k)
y = c()
for(i in START:(nrow(ts)-1)){
lag = min(i,lookBack)
regressors[i-START+1,] = get_knn(ts[i,],ts[(i-lag):(i-1),],k)
y[i-START+1] = ts[i+1,1] #next days vol
}
model = lm(y ~ 0 + regressors, data = as.data.frame(regressors))
assign(paste("model_",k,sep = ""), model, globalenv()) #no intercept!
#assign(paste("model_", currency, "_",k,sep = ""), model, globalenv()) #no intercept!
return( 1.0/length(y) *   sum((model$fitted.values - y)^2)) #training mse
}
#testing diagnostics
knn_test_diag = function(ts,k,lambda,lookBack){
START = 910
lam <<- lambda
time = c(seq(1,length(ts),1))
ts = cbind(ts, time)
regressors = matrix(nrow = nrow(ts)-START,ncol = k)
y = c()
for(i in START:(nrow(ts)-1)) {
lag = min(i,lookBack)
get_knn(ts[i,],ts[(i-lag):(i-1),],k)
regressors[i-START+1,] = get_knn(ts[i,],ts[(i-lag):(i-1),],k)
y[i-START+1] = ts[i+1,1] #next days vol
}
#model = get(paste("model_",curr,"_",k,sep = ""))
model = get(paste("model_",k,sep = ""))
fitted = model$coefficients %*% t(as.data.frame(regressors))
return( 1.0/length(y) * sum((fitted - y)^2)) #testing mse
}
#Training MSE
ks= seq(1,20,1)
tot_data = rbind(train,test)
model_coef = vector("list", ncol(train))
training_mse = matrix(nrow = length(ks),ncol = ncol(train))
testing_mse = matrix(nrow = length(ks),ncol = ncol(tot_data))
for(curr in 1:ncol(train)){
model_coef[[curr]] = matrix(0,nrow = length(ks),ncol = length(ks))
for(k in ks){
#currency <<- curr
training_mse[k,curr] = knn_regression(train[,curr],k,0,)
testing_mse[k,curr] = knn_test_diag(tot_data[,curr],k,0,2*212)
model_coef[[curr]][k,1:k] = get(paste("model_",k,sep=""))$coefficients
}
}
k_opt = c()
for(i in 1:ncol(train)){
k_opt[i] = which.min(testing_mse[,i])
}
tot_mse = rep(0,20)
for(i in 1:ncol(train)){
tot_mse = tot_mse+ testing_mse[,i]
}
k_robust = which.min(tot_mse)
comp_distance = function(x){
return((x[1]-origin[1])^2  + lam* (x[2]-origin[2])^2)
}
get_knn = function(center,slice,k){
origin <<- center
dist = apply(slice,1,comp_distance)
sorted = sort(dist,decreasing=F)[1:k]
indicies = sapply(seq(1,k), function(x) {which(dist == sorted[x])})
#indicies = c()
#for(j in 1:k){
# indicies[j] = which(dist == sorted[j])
#}
slice[length(slice) + 1] = origin[1]
return(slice[indicies+1]) #get what happened the next day
}
#function for fitting on training data
knn_regression = function(ts,k,lambda,lookBack){
START = 100
lam <<- lambda
time = c(seq(1,length(ts),1))
ts = cbind(ts, time)
regressors = matrix(nrow = nrow(ts)-START,ncol = k)
y = c()
for(i in START:(nrow(ts)-1)){
lag = min(i,lookBack)
regressors[i-START+1,] = get_knn(ts[i,],ts[(i-lag):(i-1),],k)
y[i-START+1] = ts[i+1,1] #next days vol
}
model = lm(y ~ 0 + regressors, data = as.data.frame(regressors))
assign(paste("model_",k,sep = ""), model, globalenv()) #no intercept!
#assign(paste("model_", currency, "_",k,sep = ""), model, globalenv()) #no intercept!
return( 1.0/length(y) *   sum((model$fitted.values - y)^2)) #training mse
}
#testing diagnostics
knn_test_diag = function(ts,k,lambda,lookBack){
START = 910
lam <<- lambda
time = c(seq(1,length(ts),1))
ts = cbind(ts, time)
regressors = matrix(nrow = nrow(ts)-START,ncol = k)
y = c()
for(i in START:(nrow(ts)-1)) {
lag = min(i,lookBack)
get_knn(ts[i,],ts[(i-lag):(i-1),],k)
regressors[i-START+1,] = get_knn(ts[i,],ts[(i-lag):(i-1),],k)
y[i-START+1] = ts[i+1,1] #next days vol
}
#model = get(paste("model_",curr,"_",k,sep = ""))
model = get(paste("model_",k,sep = ""))
fitted = model$coefficients %*% t(as.data.frame(regressors))
return( 1.0/length(y) * sum((fitted - y)^2)) #testing mse
}
#Training MSE
ks= seq(1,20,1)
tot_data = rbind(train,test)
model_coef = vector("list", ncol(train))
training_mse = matrix(nrow = length(ks),ncol = ncol(train))
testing_mse = matrix(nrow = length(ks),ncol = ncol(tot_data))
for(curr in 1:ncol(train)){
model_coef[[curr]] = matrix(0,nrow = length(ks),ncol = length(ks))
for(k in ks){
#currency <<- curr
training_mse[k,curr] = knn_regression(train[,curr],k,0,nrow(tot_data))
testing_mse[k,curr] = knn_test_diag(tot_data[,curr],k,0,nrow(tot_data))
model_coef[[curr]][k,1:k] = get(paste("model_",k,sep=""))$coefficients
}
}
k_opt = c()
for(i in 1:ncol(train)){
k_opt[i] = which.min(testing_mse[,i])
}
tot_mse = rep(0,20)
for(i in 1:ncol(train)){
tot_mse = tot_mse+ testing_mse[,i]
}
k_robust = which.min(tot_mse)
#plots
for(i in 1:ncol(train)){
plot(ks,training_mse[,i],main = paste("Training MSE v k for currency ",i, sep = ""), ylab = MSE, xlab = "k", pch=21,  bg="blue")
plot(ks,testing_mse[,i],main = paste("Testing MSE v k for currency ",i, sep = ""), ylab = "MSE", xlab = "k", pch=21,  bg="blue")
points(k_opt[i],tot_mse[k_opt[i]], bg = 'red')
}
plot(ks,tot_mse, main = "Aggregate Testing MSE v k", ylab = "MSE", xlab = "k",, pch=21,  bg="blue")
points(k_robust,tot_mse[k_robust], pch=21,  bg="red")
#plot the coefficients, shows that knn is not good for this purpose
for(i in 1:ncol(train)){
for(k in ks){
plot(ks,model_coef[[i]][k,], main = paste("Coefficients for ", k, "-NN for currency ",i, sep = ""), ylab = "Coefficient Size", xlab = "ith nearest neighbor", pch=21,  bg="blue")
}
}
tot_mse_cost = matrix(0,nrow = length(ks),ncol = length(cs))
for(i in 1:numcol(train)){
tot_mse_cost = tot_mse_cost + c_testing_mse[[i]]
}
tot_mse_cost = matrix(0,nrow = length(ks),ncol = length(cs))
for(i in 1:ncol(train)){
tot_mse_cost = tot_mse_cost + c_testing_mse[[i]]
}
c_testing_mse[[1]]
tot_mse_cost = matrix(0,nrow = 7,ncol = length(cs))
for(i in 1:ncol(train)){
tot_mse_cost = tot_mse_cost + c_testing_mse[[i]]
}
tot_mse_cost
mse_cost
tot_mse
min(tot_mse)
min(tot_mse_cost)
which(tot_mse_cost == min(tot_mse_cost), arr.ind = TRUE)
opt_ck = data.frame(colnames = c("k","c"))
opt_ck
opt_ck = data.frame(matrix(2,1))
opt_ck = data.frame(matrix(0,nrow = 2,ncol = 1))
opt_ck = data.frame(matrix(0,nrow = 1,ncol = 2))
colnames(opt_ck)
colnames(opt_ck) = c("k","c")
opt_ck = data.frame(matrix(0,nrow = 1,ncol = 2))
colnames(opt_ck) = c("k","c")
opt_ck = which(tot_mse_cost == min(tot_mse_cost), arr.ind = TRUE)
opt_ck
opt_ck = data.frame(matrix(0,nrow = 1,ncol = 2))
colnames(opt_ck) = c("k","c")
colnames(opt_ck) = ["k","c"]
colnames(opt_ck) = c("k","c")
opt_ck
opt_ck = which(tot_mse_cost == min(tot_mse_cost), arr.ind = TRUE)
opt_ck = which(tot_mse_cost == min(tot_mse_cost), arr.ind = TRUE)
colnames(opt_ck) = c("k","c")
opt_ck$k = ks[opt_ck$k]
opt_ck$c = cs[opt_ck$c]
opt_ck = as.data.frame(which(tot_mse_cost == min(tot_mse_cost), arr.ind = TRUE))
colnames(opt_ck) = c("k","c")
opt_ck$k = ks[opt_ck$k]
opt_ck$c = cs[opt_ck$c]
opt_ck
ks = c(1,3,6,9,12,16,20)
for(i in 1:ncol(train)){
for(k in ks){
name =  paste("Coefficients for ", k, "-NN for currency ",i, sep = "")
plot(ks,model_coef[[i]][k,], main =name, ylab = "Coefficient Size", xlab = "ith nearest neighbor", pch=21,  bg="blue")
dev.copy(pdf,paste(name,".pdf",sep=""))
dev.off()
}
}
opt_ck = as.data.frame(which(tot_mse_cost == min(tot_mse_cost), arr.ind = TRUE))
colnames(opt_ck) = c("k","c")
opt_ck$k = ks[opt_ck$k]
opt_ck$c = cs[opt_ck$c]
opt_ck
tot_mse_cost
c_mse_coeff[[7]]
c_model_coef[[7]]
c_testing_mse[[1]]
c_training_mse[[1]]
save.image("~/Desktop/FIN580/Untitled.RData")
install.packages('scatterplot3d')
library(scatterplot3d)
name = "Aggregate Testing MSE v k with time factor"
scatterplot3d(ks,cs,tot_mse_cost, main = name)
tot_mse_k = c()
for(i in 1:length(ks)){
tot_mse_k[i] = min(tot_mse_cost[i,])
}
tot_mse_k
currencies = c("AUD","CAD","CHF","EUR","GBP","JPY","NOK","NZD","SEK")
for(i in 1:ncol(train)){
name = paste("Training MSE v k for for ", currencies[i], sep = "")
plot(ks,training_mse[,i],main = name, ylab = MSE, xlab = "k", pch=21,  bg="blue")
dev.copy(pdf,paste(name,".pdf",sep=""))
dev.off()
name = paste("Testing MSE v k for ", currencies[i], sep = "")
plot(ks,testing_mse[,i],main = name, ylab = "MSE", xlab = "k", pch=21,  bg="blue")
points(k_opt[i],tot_mse[k_opt[i]], bg = 'red')
dev.copy(pdf,paste(name,".pdf",sep=""))
dev.off()
}
ks= seq(1,20,1)
currencies = c("AUD","CAD","CHF","EUR","GBP","JPY","NOK","NZD","SEK")
for(i in 1:ncol(train)){
name = paste("Training MSE v k for for ", currencies[i], sep = "")
plot(ks,training_mse[,i],main = name, ylab = MSE, xlab = "k", pch=21,  bg="blue")
dev.copy(pdf,paste(name,".pdf",sep=""))
dev.off()
name = paste("Testing MSE v k for ", currencies[i], sep = "")
plot(ks,testing_mse[,i],main = name, ylab = "MSE", xlab = "k", pch=21,  bg="blue")
points(k_opt[i],tot_mse[k_opt[i]], bg = 'red')
dev.copy(pdf,paste(name,".pdf",sep=""))
dev.off()
}
name = "Aggregate Testing MSE v k"
plot(ks,tot_mse, main = name, ylab = "MSE", xlab = "k",, pch=21,  bg="blue")
points(k_robust,tot_mse[k_robust], pch=21,  bg="red")
dev.copy(pdf,paste(name,".pdf",sep=""))
dev.off()
#plot the coefficients, shows that knn is not good for this purpose
for(i in 1:ncol(train)){
for(k in ks){
name =  paste("Coefficients for ", k, "-NN for ", currencies[i], sep = "")
plot(ks,model_coef[[i]][k,], main =name, ylab = "Coefficient Size", xlab = "ith nearest neighbor", pch=21,  bg="blue")
dev.copy(pdf,paste(name,".pdf",sep=""))
dev.off()
}
}
for(i in 1:ncol(train)){
for(k in ks){
name =  paste("Coefficients for ", k, "-NN for ", currencies[i], sep = "")
plot(ks[1:k],model_coef[[i]][k,1:k], main =name, ylab = "Coefficient Size", xlab = "ith nearest neighbor", pch=21,  bg="blue")
dev.copy(pdf,paste(name,".pdf",sep=""))
dev.off()
}
}
model_coef[[i]]
rowsum(model_coef[[1]])
rowsum(model_coef[[1]][1,])
model_coef[[1]]
apply(1:length(ks),1,sum)
apply(1:length(ks),1,sum(x))
apply(1:length(ks),1,sum)
1:length(ks)
apply(model_coef[[i]],1,sum)
model_coef[[i]][1,]
for(i in 1:ncol(train)){
name =  paste("Sum of Coefficients for v k for ", currencies[i], sep = "")
sum_coef =  apply(model_coef[[i]],1,sum)
plot(ks[1:k],model_coef[[i]][k,1:k], main =name, ylab = "Sum", xlab = "k", pch=21,  bg="blue")
}
for(i in 1:ncol(train)){
name =  paste("Sum of Coefficients for v k for ", currencies[i], sep = "")
sum_coef =  apply(model_coef[[i]],1,sum)
plot(ks[1:k],model_coef[[i]][k,1:k], main =name, ylab = "Sum", xlab = "k", pch=21,  bg="blue")
dev.copy(pdf,paste(name,".pdf",sep=""))
dev.off()
}
testing_mse
k_robust
k_robust
tot_mse
testing_mse
min(testing_mse[,1])
which(testing_mse[,1] == min(testing_mse[,1]))
which(testing_mse[,2] == min(testing_mse[,2]))
which(testing_mse[,3] == min(testing_mse[,3]))
which(testing_mse[,4] == min(testing_mse[,4]))
which(testing_mse[,5] == min(testing_mse[,5]))
which(testing_mse[,6] == min(testing_mse[,6]))
which(testing_mse[,7] == min(testing_mse[,7]))
which(testing_mse[,8] == min(testing_mse[,8]))
which(testing_mse[,9] == min(testing_mse[,9]))
which(testing_mse[,10] == min(testing_mse[,10]))
k_opt
moel_coef[[i]]
model_coef[[i]]
apply(model_coef[[i]],1,sum)
for(i in 1:ncol(train)){
name =  paste("Sum of Coefficients for v k for ", currencies[i], sep = "")
sum_coef =  apply(model_coef[[i]],1,sum)
plot(ks[1:k],sum_coef, main =name, ylab = "Sum", xlab = "k", pch=21,  bg="blue")
dev.copy(pdf,paste(name,".pdf",sep=""))
dev.off()
}
for(i in 1:ncol(train)){
name =  paste("Sum of Coefficients v k for ", currencies[i], sep = "")
sum_coef =  apply(model_coef[[i]],1,sum)
plot(ks[1:k],sum_coef, main =name, ylab = "Sum", xlab = "k", pch=21,  bg="blue")
dev.copy(pdf,paste(name,".pdf",sep=""))
dev.off()
}
ks= seq(1,20,1)
currencies = c("AUD","CAD","CHF","EUR","GBP","JPY","NOK","NZD","SEK")
for(i in 1:ncol(train)){
name = paste("Training MSE v k for for ", currencies[i], sep = "")
plot(ks,training_mse[,i],main = name, ylab = MSE, xlab = "k", pch=21,  bg="blue")
dev.copy(pdf,paste(name,".pdf",sep=""))
dev.off()
name = paste("Testing MSE v k for ", currencies[i], sep = "")
plot(ks,testing_mse[,i],main = name, ylab = "MSE", xlab = "k", pch=21,  bg="blue")
points(k_opt[i],tot_mse[k_opt[i]], bg = 'red')
dev.copy(pdf,paste(name,".pdf",sep=""))
dev.off()
}
currencies = c("AUD","CAD","CHF","EUR","GBP","JPY","NOK","NZD","SEK")
for(i in 1:ncol(train)){
name = paste("Training MSE v k for for ", currencies[i], sep = "")
plot(ks,training_mse[,i],main = name, ylab = "MSE", xlab = "k", pch=21,  bg="blue")
dev.copy(pdf,paste(name,".pdf",sep=""))
dev.off()
name = paste("Testing MSE v k for ", currencies[i], sep = "")
plot(ks,testing_mse[,i],main = name, ylab = "MSE", xlab = "k", pch=21,  bg="blue")
points(k_opt[i],tot_mse[k_opt[i]], bg = 'red')
dev.copy(pdf,paste(name,".pdf",sep=""))
dev.off()
}
name = "Aggregate Testing MSE v k with time factor"
plot(ks,tot_mse_k, main = name)
points(opt_ck$k,tot_mse_k[opt_ck$k], pch=21,  bg="red")
dev.copy(pdf,paste(name,".pdf",sep=""))
dev.off()
ks = c(1,3,6,9,12,16,20)
name = "Aggregate Testing MSE v k with time factor"
plot(ks,tot_mse_k, main = name)
points(opt_ck$k,tot_mse_k[opt_ck$k], pch=21,  bg="red")
dev.copy(pdf,paste(name,".pdf",sep=""))
dev.off()
name = "Aggregate Testing MSE v k with time factor"
plot(ks,tot_mse_k, main = name)
points(opt_ck$k,tot_mse_k[opt_ck$k],xlab = "k",ylab = "MSE", pch=21,  bg="blue")
dev.copy(pdf,paste(name,".pdf",sep=""))
dev.off()
name = "Aggregate Testing MSE v k with time factor"
plot(ks,tot_mse_k, main = name, xlab = "k",ylab = "MSE", pch=21,  bg="blue")
points(opt_ck$k,tot_mse_k[opt_ck$k], pch = 21, bg="red")
dev.copy(pdf,paste(name,".pdf",sep=""))
dev.off()
opt_ck$k
tot_mse_k[opt_ck$k]
name = "Aggregate Testing MSE v k with time factor"
plot(ks,tot_mse_k, main = name, xlab = "k",ylab = "MSE", pch=21,  bg="blue")
points(opt_ck$k,tot_mse_k[which(ks == opt_ck$k)], pch = 21, bg="red")
dev.copy(pdf,paste(name,".pdf",sep=""))
dev.off()
results = as.data.frame(matrix(nrow = ncol(train),ncol = 2 ))
results = matrix(nrow = ncol(train),ncol = 2 )
results = matrix(nrow = ncol(train),ncol = 2 )
colnames(results) = c("mse","mse_time")
rownames(results) = currencies
results
testing_mse
c_testing_mse[[1]]
results = matrix(nrow = ncol(train),ncol = 2 )
colnames(results) = c("mse","mse_time")
rownames(results) = currencies
for(i in 1:ncol(train)){
results[i,1] = min(testing_mse[,i])
results[i,2] = min(c_testing_mse[,i])
}
for(i in 1:ncol(train)){
results[i,1] = min(testing_mse[,i])
results[i,2] = min(c_testing_mse[[i]])
}
library(stargazer)
install.packages('stargazer')
library(stargazer)
install.packages(gridExtra)
install.packages('gridExtra')
library(gridExtra)
pdf("knn_results.pdf", height=11, width=8.5)
grid.table(results)
dev.off()
