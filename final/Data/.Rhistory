states=get(paste(data_type,"states",n_states,sep="_"))[[curr_i]]
use_data=cbind(use_data,states)
train=data.frame(use_data[which(use_data$states==reg),])
#Training x and y
train_x=train[,"Vol"]
train_x=data.matrix(train_x[-length(train_x)])
train_y=train[,"Vol"]
train_y=train_y[-1]
#We will still cross validate to get the optimal lambda
if(data_type=="daily"){
p_opt=p_d
}
else{
p_opt=p_w
}
cvmodel=timeLagLasso.cv(train_x,train_y,maxlag=p_opt,strongly.ordered = TRUE,trace=FALSE)
lam=cvmodel$lamhat
model=timeLagLasso(train_x,train_y,lambda=lam,maxlag=p_opt,strongly.ordered = TRUE,trace=FALSE)
return(model)
}
t=train_lasso_curr("daily",2,1,1)
class(t)
populate_lassos=function(data_type,n_states,reg){
name=paste("lasso",data_type,n_states,reg,sep="_")
use_list=get(name)
for(i in 1:length(currencies)){
print(i)
use_list[length(use_list)+1]=train_lasso_curr(data_type,n_states,reg,i)
}
assign(name,use_list)
return(get(name))
}
setwd("~/Documents/Grad_School/2016-2017_Spring/Amin/Homework/HW_3/FIN580/final/data")
for(n in 2:3){
for(r in 1:2){
data_type="daily"
name=paste("lasso",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_lassos(data_type,n,r)
assign(name,use_list)
save(get(name),file=paste(name,".RData",sep=""))
data_type="weekly"
name=paste("lasso",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_lassos(data_type,n,r)
assign(name,use_list)
save(get(name),file=paste(name,".RData",sep=""))
}
if(n>2){
r=3
data_type="daily"
name=paste("lasso",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_lassos(data_type,n,r)
assign(name,use_list)
save(get(name),file=paste(name,".RData",sep=""))
data_type="weekly"
name=paste("lasso",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_lassos(data_type,n,r)
assign(name,use_list)
save(get(name),file=paste(name,".RData",sep=""))
}
}
t=populate_lassos("daily",2,2)
train_lasso_curr=function(data_type,n_states,reg,curr_i){
#Get train first
use_data=get(paste(data_type,"_data",sep=""))[[curr_i]]
use_data=use_data[which(use_data[,"S_train"]==1),]
states=get(paste(data_type,"states",n_states,sep="_"))[[curr_i]]
use_data=cbind(use_data,states)
train=data.frame(use_data[which(use_data$states==reg),])
#Training x and y
train_x=train[,"Vol"]
train_x=data.matrix(train_x[-length(train_x)])
train_y=train[,"Vol"]
train_y=train_y[-1]
#We will still cross validate to get the optimal lambda
if(data_type=="daily"){
p_opt=p_d
}
else{
p_opt=p_w
}
cvmodel=timeLagLasso.cv(train_x,train_y,maxlag=p_opt,strongly.ordered = TRUE,trace=FALSE)
lam=cvmodel$lamhat
model=timeLagLasso(train_x,train_y,lambda=lam,maxlag=p_opt,strongly.ordered = TRUE,trace=FALSE)
return(model)
}
t=list()
t[1]=train_lasso_curr("daily",2,1,1)
tt=train_lasso_curr("daily",2,1,1)
t[[1]]=train_lasso_curr("daily",2,1,1)
populate_lassos=function(data_type,n_states,reg){
name=paste("lasso",data_type,n_states,reg,sep="_")
use_list=get(name)
for(i in 1:length(currencies)){
print(i)
use_list[[length(use_list)+1]]=train_lasso_curr(data_type,n_states,reg,i)
}
assign(name,use_list)
return(get(name))
}
for(n in 2:3){
for(r in 1:2){
data_type="daily"
name=paste("lasso",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_lassos(data_type,n,r)
assign(name,use_list)
save(get(name),file=paste(name,".RData",sep=""))
data_type="weekly"
name=paste("lasso",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_lassos(data_type,n,r)
assign(name,use_list)
save(get(name),file=paste(name,".RData",sep=""))
}
if(n>2){
r=3
data_type="daily"
name=paste("lasso",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_lassos(data_type,n,r)
assign(name,use_list)
save(get(name),file=paste(name,".RData",sep=""))
data_type="weekly"
name=paste("lasso",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_lassos(data_type,n,r)
assign(name,use_list)
save(get(name),file=paste(name,".RData",sep=""))
}
}
n=2
r=1
data_type="daily"
name=paste("lasso",data_type,n,r,sep="_")
name
use_list=get(name)
use_list
lasso_daily_2_1=list()
lasso_daily_2_2=list()
lasso_daily_3_1=list()
lasso_daily_3_2=list()
lasso_daily_3_3=list()
#Weekly
lasso_weekly_2_1=list()
lasso_weekly_2_2=list()
lasso_weekly_3_1=list()
lasso_weekly_3_2=list()
lasso_weekly_3_3=list()
n=2
r=1
data_type="daily"
name=paste("lasso",data_type,n,r,sep="_")
use_list=get(name)
use_list
use_list=populate_lassos(data_type,n,r)
assign(name,use_list)
save(get(name),file=paste(name,".RData",sep=""))
t=get(name)
temp=get(name)
save(temp,file=paste(name,".RData",sep=""))
#Daily
lasso_daily_2_1=list()
lasso_daily_2_2=list()
lasso_daily_3_1=list()
lasso_daily_3_2=list()
lasso_daily_3_3=list()
#Weekly
lasso_weekly_2_1=list()
lasso_weekly_2_2=list()
lasso_weekly_3_1=list()
lasso_weekly_3_2=list()
lasso_weekly_3_3=list()
setwd("~/Documents/Grad_School/2016-2017_Spring/Amin/Homework/HW_3/FIN580/final/data")
for(n in 2:3){
for(r in 1:2){
n=2
r=1
data_type="daily"
name=paste("lasso",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_lassos(data_type,n,r)
assign(name,use_list)
temp=get(name)
save(temp,file=paste(name,".RData",sep=""))
data_type="weekly"
name=paste("lasso",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_lassos(data_type,n,r)
assign(name,use_list)
temp=get(name)
save(temp,file=paste(name,".RData",sep=""))
}
if(n>2){
r=3
data_type="daily"
name=paste("lasso",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_lassos(data_type,n,r)
assign(name,use_list)
temp=get(name)
save(temp,file=paste(name,".RData",sep=""))
data_type="weekly"
name=paste("lasso",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_lassos(data_type,n,r)
assign(name,use_list)
temp=get(name)
save(temp,file=paste(name,".RData",sep=""))
}
}
use_data=get(paste(data_type,"_data",sep=""))[[curr_i]]
test=use_data[which(use_data[,"S_train"]==0),]
states=get(paste(data_type,"test_regimes",n_states,sep="_"))[[curr_i]]
test=cbind(test,states)
test=test[which(states==reg),]
get_lasso_test_error=function(data_type,n_states,reg){
mse=0
for(curr_i in 1:length(currencies)){
#Getting data
use_data=get(paste(data_type,"_data",sep=""))[[curr_i]]
test=use_data[which(use_data[,"S_train"]==0),]
states=get(paste(data_type,"test_regimes",n_states,sep="_"))[[curr_i]]
test=cbind(test,states)
test=test[which(states==reg),]
#Testing x and y
test_x=test[,"Vol"]
test_x=data.matrix(test_x[-length(test_x)])
test_y=test[,"Vol"]
test_y=data.matrix(test_y[-1])
#Getting model
model=get(paste("lasso",data_type,n_states,reg,sep="_"))[[curr_i]]
pred_y=predict.timeLagLasso(model,test_x)
pred_y=pred_y$yhat.ordered[1:length(test_y)]
mse=+mse(pred_y,test_y)
}
return(mse/7.0)
}
get_lasso_test_error("daily",2,1)
get_lasso_test_error("daily",2,2)
use_data=get(paste(data_type,"_data",sep=""))[[curr_i]]
get_lasso_test_error=function(data_type,n_states,reg){
mse=0
for(curr_i in 1:length(currencies)){
print(curr_i)
#Getting data
use_data=get(paste(data_type,"_data",sep=""))[[curr_i]]
test=use_data[which(use_data[,"S_train"]==0),]
states=get(paste(data_type,"test_regimes",n_states,sep="_"))[[curr_i]]
test=cbind(test,states)
test=test[which(states==reg),]
#Testing x and y
test_x=test[,"Vol"]
test_x=data.matrix(test_x[-length(test_x)])
test_y=test[,"Vol"]
test_y=data.matrix(test_y[-1])
#Getting model
model=get(paste("lasso",data_type,n_states,reg,sep="_"))[[curr_i]]
pred_y=predict.timeLagLasso(model,test_x)
pred_y=pred_y$yhat.ordered[1:length(test_y)]
mse=+mse(pred_y,test_y)
}
return(mse/7.0)
}
get_lasso_test_error("daily",2,2)
t=get(paste(data_type,"_data",sep=""))
t[[1]]
curr_i
t[[2]]
get_lasso_test_error=function(data_type,n_states,reg){
mse=0
for(curr_i in 1:length(currencies)){
print(curr_i)
#Getting data
t=get(paste(data_type,"_data",sep=""))
use_data=get(paste(data_type,"_data",sep=""))[[curr_i]]
test=use_data[which(use_data[,"S_train"]==0),]
states=get(paste(data_type,"test_regimes",n_states,sep="_"))[[curr_i]]
test=cbind(test,states)
test=test[which(states==reg),]
#Testing x and y
test_x=test[,"Vol"]
test_x=data.matrix(test_x[-length(test_x)])
test_y=test[,"Vol"]
test_y=data.matrix(test_y[-1])
#Getting model
model=get(paste("lasso",data_type,n_states,reg,sep="_"))[[curr_i]]
pred_y=predict.timeLagLasso(model,test_x)
pred_y=pred_y$yhat.ordered[1:length(test_y)]
mse=+mse(pred_y,test_y)
}
return(mse/7.0)
}
get_lasso_test_error("daily",2,1)
get_lasso_test_error("daily",2,2)
t=get(paste(data_type,"test_regimes",n_states,sep="_"))
t[[1]]
t[[2]]
t[[3]]
t[[7]]
get_lasso_test_error("daily",2,2)
lasso_daily_2_1=list()
lasso_daily_2_2=list()
lasso_daily_3_1=list()
lasso_daily_3_2=list()
lasso_daily_3_3=list()
#Weekly
lasso_weekly_2_1=list()
lasso_weekly_2_2=list()
lasso_weekly_3_1=list()
lasso_weekly_3_2=list()
lasso_weekly_3_3=list()
setwd("~/Documents/Grad_School/2016-2017_Spring/Amin/Homework/HW_3/FIN580/final/data")
for(n in 2:3){
for(r in 1:2){
data_type="daily"
name=paste("lasso",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_lassos(data_type,n,r)
assign(name,use_list)
temp=get(name)
save(temp,file=paste(name,".RData",sep=""))
data_type="weekly"
name=paste("lasso",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_lassos(data_type,n,r)
assign(name,use_list)
temp=get(name)
save(temp,file=paste(name,".RData",sep=""))
}
if(n>2){
r=3
data_type="daily"
name=paste("lasso",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_lassos(data_type,n,r)
assign(name,use_list)
temp=get(name)
save(temp,file=paste(name,".RData",sep=""))
data_type="weekly"
name=paste("lasso",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_lassos(data_type,n,r)
assign(name,use_list)
temp=get(name)
save(temp,file=paste(name,".RData",sep=""))
}
}
get_lasso_test_error=function(data_type,n_states,reg){
mse=0
for(curr_i in 1:length(currencies)){
print(curr_i)
#Getting data
use_data=get(paste(data_type,"_data",sep=""))[[curr_i]]
test=use_data[which(use_data[,"S_train"]==0),]
states=get(paste(data_type,"test_regimes",n_states,sep="_"))[[curr_i]]
test=cbind(test,states)
test=test[which(states==reg),]
#Testing x and y
test_x=test[,"Vol"]
test_x=data.matrix(test_x[-length(test_x)])
test_y=test[,"Vol"]
test_y=data.matrix(test_y[-1])
#Getting model
model=get(paste("lasso",data_type,n_states,reg,sep="_"))[[curr_i]]
pred_y=predict.timeLagLasso(model,test_x)
pred_y=pred_y$yhat.ordered[1:length(test_y)]
mse=+mse(pred_y,test_y)
}
return(mse/7.0)
}
get_lasso_test_error("daily",2,2)
get_lasso_test_error=function(data_type,n_states,reg){
mse=0
for(curr_i in 1:length(currencies)){
#Getting data
use_data=get(paste(data_type,"_data",sep=""))[[curr_i]]
test=use_data[which(use_data[,"S_train"]==0),]
states=get(paste(data_type,"test_regimes",n_states,sep="_"))[[curr_i]]
test=cbind(test,states)
test=test[which(states==reg),]
#Testing x and y
test_x=test[,"Vol"]
test_x=data.matrix(test_x[-length(test_x)])
test_y=test[,"Vol"]
test_y=data.matrix(test_y[-1])
#Getting model
model=get(paste("lasso",data_type,n_states,reg,sep="_"))[[curr_i]]
pred_y=predict.timeLagLasso(model,test_x)
pred_y=pred_y$yhat.ordered[1:length(test_y)]
mse=+mse(pred_y,test_y)
}
return(mse/7.0)
}
mses_daily_l=matrix(NA,nrow=3,ncol=2)
rownames(mses_daily_l)=c("Regime 1","Regime 2","Regime 3")
colnames(mses_daily_l)=c("No. States: 2","No. States: 3")
mses_weekly_l=matrix(NA,nrow=3,ncol=2)
rownames(mses_weekly_l)=c("Regime 1","Regime 2","Regime 3")
colnames(mses_weekly_l)=c("No. States: 2","No. States: 3")
for(n in 2:3){
for(r in 1:2){
print(paste("r:",r,"n:",n))
mses_daily_l[r,n-1]=get_lasso_test_error("daily",n,r)
mses_weekly_l[r,n-1]=get_lasso_test_error("weekly",n,r)
}
if(n>2){
print(paste("r:",r,"n:",n))
r=3
mses_daily_l[r,n-1]=get_lasso_test_error("daily",n,r)
mses_weekly_l[r,n-1]=get_lasso_test_error("weekly",n,r)
}
}
stargazer(mses_daily_l)
stargazer(mses_weekly_l)
name=paste("daily_test_regimes",n,sep="_")
temp=get(name)
n
length(temp)
temp_2=apply(seq(1,length(currencies),1),function(x){return(length(which(temp_1[[x]])==r))
})
temp_2=sapply(seq(1,length(currencies),1),function(x){return(length(which(temp_1[[x]])==r))
})
temp_1=get(name)
temp_2=sapply(seq(1,length(currencies),1),function(x){return(length(which(temp_1[[x]])==r))
})
temp_2=sapply(seq(1,length(currencies),1),function(x){return(length(which(temp_1[[x]]==r)))})
temp_@
temp_2
temp_2=sum(sapply(seq(1,length(currencies),1),function(x){return(length(which(temp_1[[x]]==r)))}))
temp_2
name=paste("weekly_test_regimes",n,sep="_")
temp=get(name)
mses_weekly[r,n-1]=sum(sapply(seq(1,length(currencies),1),function(x){return(length(which(temp[[x]]==r)))}))
n_weekly[r,n-1]=sum(sapply(seq(1,length(currencies),1),function(x){return(length(which(temp[[x]]==r)))}))
}
n_daily=matrix(NA,nrow=3,ncol=2)
rownames(n_daily)=c("Regime 1","Regime 2","Regime 3")
colnames(n_daily)=c("No. States: 2","No. States: 3")
n_weekly=matrix(NA,nrow=3,ncol=2)
rownames(n_weekly)=c("Regime 1","Regime 2","Regime 3")
colnames(n_weekly)=c("No. States: 2","No. States: 3")
n_daily=matrix(NA,nrow=3,ncol=2)
rownames(n_daily)=c("Regime 1","Regime 2","Regime 3")
colnames(n_daily)=c("No. States: 2","No. States: 3")
n_weekly=matrix(NA,nrow=3,ncol=2)
rownames(n_weekly)=c("Regime 1","Regime 2","Regime 3")
colnames(n_weekly)=c("No. States: 2","No. States: 3")
for(n in 2:3){
for(r in 1:2){
name=paste("daily_test_regimes",n,sep="_")
temp=get(name)
n_daily[r,n-1]=sum(sapply(seq(1,length(currencies),1),function(x){return(length(which(temp[[x]]==r)))}))
name=paste("weekly_test_regimes",n,sep="_")
temp=get(name)
n_weekly[r,n-1]=sum(sapply(seq(1,length(currencies),1),function(x){return(length(which(temp[[x]]==r)))}))
}
if(n>2){
print(paste("r:",r,"n:",n))
r=3
name=paste("daily_test_regimes",n,sep="_")
temp=get(name)
n_daily[r,n-1]=sum(sapply(seq(1,length(currencies),1),function(x){return(length(which(temp[[x]]==r)))}))
name=paste("weekly_test_regimes",n,sep="_")
temp=get(name)
n_weekly[r,n-1]=sum(sapply(seq(1,length(currencies),1),function(x){return(length(which(temp[[x]]==r)))}))
}
}
n_daily
n_weekly
900*7
name=paste("daily_test_regimes",n,sep="_")
temp=get(name)
temp[[1]]
denom=sum(sapply(seq(1,length(currencies),1),function(x){return(length(temp[[x]]))}))
denom
n_daily=matrix(NA,nrow=3,ncol=2)
rownames(n_daily)=c("Regime 1","Regime 2","Regime 3")
colnames(n_daily)=c("No. States: 2","No. States: 3")
n_weekly=matrix(NA,nrow=3,ncol=2)
rownames(n_weekly)=c("Regime 1","Regime 2","Regime 3")
colnames(n_weekly)=c("No. States: 2","No. States: 3")
for(n in 2:3){
for(r in 1:2){
name=paste("daily_test_regimes",n,sep="_")
temp=get(name)
denom=sum(sapply(seq(1,length(currencies),1),function(x){return(length(temp[[x]]))}))
n_daily[r,n-1]=sum(sapply(seq(1,length(currencies),1),function(x){return(length(which(temp[[x]]==r)))}))/denom
name=paste("weekly_test_regimes",n,sep="_")
temp=get(name)
denom=sum(sapply(seq(1,length(currencies),1),function(x){return(length(temp[[x]]))}))
n_weekly[r,n-1]=sum(sapply(seq(1,length(currencies),1),function(x){return(length(which(temp[[x]]==r)))}))/denom
}
if(n>2){
r=3
name=paste("daily_test_regimes",n,sep="_")
temp=get(name)
denom=sum(sapply(seq(1,length(currencies),1),function(x){return(length(temp[[x]]))}))
n_daily[r,n-1]=sum(sapply(seq(1,length(currencies),1),function(x){return(length(which(temp[[x]]==r)))}))/denom
name=paste("weekly_test_regimes",n,sep="_")
temp=get(name)
denom=sum(sapply(seq(1,length(currencies),1),function(x){return(length(temp[[x]]))}))
n_weekly[r,n-1]=sum(sapply(seq(1,length(currencies),1),function(x){return(length(which(temp[[x]]==r)))}))/denom
}
}
n_daily
n_weekly
stargazer(n_daily)
stargazer(n_weekly)
