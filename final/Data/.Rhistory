use_list=populate_garchs(data_type,n,r)
assign(name,use_list)
save(get(name),file=paste(name,".RData",sep=""))
data_type="weekly"
name=paste("garch",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_garchs(data_type,n,r)
assign(name,use_list)
save(get(name),file=paste(name,".RData",sep=""))
}
if(n>2){
r=3
data_type="daily"
name=paste("garch",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_garchs(data_type,n,r)
assign(name,use_list)
save(get(name),file=paste(name,".RData",sep=""))
data_type="weekly"
name=paste("garch",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_garchs(data_type,n,r)
assign(name,use_list)
save(get(name),file=paste(name,".RData",sep=""))
}
}
garch_daily_2_1=list()
garch_daily_2_2=list()
garch_daily_3_1=list()
garch_daily_3_2=list()
garch_daily_3_3=list()
#Weekly
garch_weekly_2_1=list()
garch_weekly_2_2=list()
garch_weekly_3_1=list()
garch_weekly_3_2=list()
garch_weekly_3_3=list()
n=2
r=1
data_type="daily"
name=paste("garch",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_garchs(data_type,n,r)
assign(name,use_list)
save(get(name),file=paste(name,".RData",sep=""))
data_type="weekly"
name=paste("garch",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_garchs(data_type,n,r)
assign(name,use_list)
save(get(name),file=paste(name,".RData",sep=""))
r=2
data_type="daily"
name=paste("garch",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_garchs(data_type,n,r)
assign(name,use_list)
save(get(name),file=paste(name,".RData",sep=""))
data_type="weekly"
name=paste("garch",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_garchs(data_type,n,r)
assign(name,use_list)
save(get(name),file=paste(name,".RData",sep=""))
n=1
r=1
data_type="daily"
name=paste("garch",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_garchs(data_type,n,r)
assign(name,use_list)
save(get(name),file=paste(name,".RData",sep=""))
data_type="weekly"
name=paste("garch",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_garchs(data_type,n,r)
assign(name,use_list)
save(get(name),file=paste(name,".RData",sep=""))
n=3
r=1
data_type="daily"
name=paste("garch",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_garchs(data_type,n,r)
assign(name,use_list)
save(get(name),file=paste(name,".RData",sep=""))
data_type="weekly"
name=paste("garch",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_garchs(data_type,n,r)
assign(name,use_list)
save(get(name),file=paste(name,".RData",sep=""))
}
r=2
data_type="daily"
name=paste("garch",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_garchs(data_type,n,r)
assign(name,use_list)
save(get(name),file=paste(name,".RData",sep=""))
data_type="weekly"
name=paste("garch",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_garchs(data_type,n,r)
assign(name,use_list)
save(get(name),file=paste(name,".RData",sep=""))
}
data_type="daily"
name=paste("garch",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_garchs(data_type,n,r)
assign(name,use_list)
save(get(name),file=paste(name,".RData",sep=""))
data_type="weekly"
name=paste("garch",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_garchs(data_type,n,r)
assign(name,use_list)
save(get(name),file=paste(name,".RData",sep=""))
garch_weekly_3_2=list()
garch_daily_3_2=list()
n=3
r=2
data_type="daily"
name=paste("garch",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_garchs(data_type,n,r)
assign(name,use_list)
save(get(name),file=paste(name,".RData",sep=""))
data_type="weekly"
name=paste("garch",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_garchs(data_type,n,r)
assign(name,use_list)
save(get(name),file=paste(name,".RData",sep=""))
r=3
data_type="daily"
name=paste("garch",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_garchs(data_type,n,r)
assign(name,use_list)
save(get(name),file=paste(name,".RData",sep=""))
data_type="weekly"
name=paste("garch",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_garchs(data_type,n,r)
assign(name,use_list)
save(get(name),file=paste(name,".RData",sep=""))
get_garch_test_error=function(data_type,n_states,reg){
mse=0
for(curr_i in 1:length(currencies)){
#Getting data
use_data=get(paste(data_type,"_data",sep=""))[[curr_i]]
test=use_data[which(use_data[,"S_train"]==0),"Vol"]
states=get(paste(data_type,"test_regimes",n_states,sep="_"))[[curr_i]]
test=cbind(test,states)
test=test[which(states==reg)]
model=get(paste("garch",data_type,n_states,reg,sep="_"))[[curr_i]]
pred_y=predict(model,n.ahead=length(test))$standardDeviation
#Since we have log-vols, but the predictions arent need to change
pred_y=log(pred_y)
mse=+mse(pred_y,test)
}
return(mse/7.0)
}
mses_daily=matrix(NA,nrow=3,ncol=2)
rownames(mses_daily)=c("Regime 1","Regime 2","Regime 3")
colnames(mses_daily)=c("No. States: 2","No. States: 3")
mses_weekly=matrix(NA,nrow=3,ncol=2)
rownames(mses_weekly)=c("Regime 1","Regime 2","Regime 3")
colnames(mses_weekly)=c("No. States: 2","No. States: 3")
for(n in 2:3){
for(r in 1:2){
print(paste("r:",r,"n:",n))
mses_daily[r,n-1]=get_garch_test_error("daily",n,r)
mses_weekly[r,n-1]=get_garch_test_error("weekly",n,r)
}
if(n>2){
print(paste("r:",r,"n:",n))
r=3
mses_daily[r,n-1]=get_garch_test_error("daily",n,r)
mses_weekly[r,n-1]=get_garch_test_error("weekly",n,r)
}
}
stargazer(mses_daily)
stargazer(mses_weekly)
load("lasso_daily_2_1.RData")
load("lasso_daily_2_2.RData")
load("lasso_daily_3_1.RData")
load("lasso_daily_3_2.RData")
load("lasso_daily_3_3.RData")
load("lasso_weekly_2_1.RData")
load("lasso_weekly_2_2.RData")
load("lasso_weekly_3_1.RData")
load("lasso_weekly_3_2.RData")
load("lasso_weekly_3_3.RData")
get_lasso_test_error=function(data_type,n_states,reg){
mse=0
for(curr_i in 1:length(currencies)){
#Getting data
use_data=get(paste(data_type,"_data",sep=""))[[curr_i]]
test=use_data[which(use_data[,"S_train"]==0),]
states=get(paste(data_type,"test_regimes",n_states,sep="_"))[[curr_i]]
test=cbind(test,states)
test=test[which(states==reg),]
#Testing x and y
test_x=test[,"Vol"]
test_x=data.matrix(test_x[-length(test_x)])
test_y=test[,"Vol"]
test_y=data.matrix(test_y[-1])
#Getting model
model=get(paste("lasso",data_type,n_states,reg,sep="_"))[[curr_i]]
pred_y=predict.timeLagLasso(model,test_x)
pred_y=pred_y$yhat.ordered[1:length(test_y)]
mse=+mse(pred_y,test_y)
}
return(mse/7.0)
}
mses_daily_l=matrix(NA,nrow=3,ncol=2)
rownames(mses_daily_l)=c("Regime 1","Regime 2","Regime 3")
colnames(mses_daily_l)=c("No. States: 2","No. States: 3")
mses_weekly_l=matrix(NA,nrow=3,ncol=2)
rownames(mses_weekly_l)=c("Regime 1","Regime 2","Regime 3")
colnames(mses_weekly_l)=c("No. States: 2","No. States: 3")
for(n in 2:3){
for(r in 1:2){
print(paste("r:",r,"n:",n))
mses_daily_l[r,n-1]=get_lasso_test_error("daily",n,r)
mses_weekly_l[r,n-1]=get_lasso_test_error("weekly",n,r)
}
if(n>2){
print(paste("r:",r,"n:",n))
r=3
mses_daily_l[r,n-1]=get_lasso_test_error("daily",n,r)
mses_weekly_l[r,n-1]=get_lasso_test_error("weekly",n,r)
}
}
load("lasso_daily_2_1.RData")
lasso_daily_2_1=list()
lasso_daily_2_2=list()
lasso_daily_3_1=list()
lasso_daily_3_2=list()
lasso_daily_3_3=list()
#Weekly
lasso_weekly_2_1=list()
lasso_weekly_2_2=list()
lasso_weekly_3_1=list()
lasso_weekly_3_2=list()
lasso_weekly_3_3=list()
train_lasso_curr=function(data_type,n_states,reg,curr_i){
#Get train first
use_data=get(paste(data_type,"_data",sep=""))[[curr_i]]
use_data=use_data[which(use_data[,"S_train"]==1),]
states=get(paste(data_type,"states",n_states,sep="_"))[[curr_i]]
use_data=cbind(use_data,states)
train=data.frame(use_data[which(use_data$states==reg),])
#Training x and y
train_x=train[,"Vol"]
train_x=data.matrix(train_x[-length(train_x)])
train_y=train[,"Vol"]
train_y=train_y[-1]
#We will still cross validate to get the optimal lambda
if(data_type=="daily"){
p_opt=p_d
}
else{
p_opt=p_w
}
cvmodel=timeLagLasso.cv(train_x,train_y,maxlag=p_opt,strongly.ordered = TRUE,trace=FALSE)
lam=cvmodel$lamhat
model=timeLagLasso(train_x,train_y,lambda=lam,maxlag=p_opt,strongly.ordered = TRUE,trace=FALSE)
return(model)
}
#Function populates all currencies for one list
populate_lassos=function(data_type,n_states,reg){
name=paste("lasso",data_type,n_states,reg,sep="_")
use_list=get(name)
for(i in 1:length(currencies)){
print(i)
use_list[[length(use_list)+1]]=train_lasso_curr(data_type,n_states,reg,i)
}
assign(name,use_list)
return(get(name))
}
setwd("~/Documents/Grad_School/2016-2017_Spring/Amin/Homework/HW_3/FIN580/final/data")
for(n in 2:3){
for(r in 1:2){
data_type="daily"
name=paste("lasso",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_lassos(data_type,n,r)
assign(name,use_list)
temp=get(name)
save(temp,file=paste(name,".RData",sep=""))
data_type="weekly"
name=paste("lasso",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_lassos(data_type,n,r)
assign(name,use_list)
temp=get(name)
save(temp,file=paste(name,".RData",sep=""))
}
if(n>2){
r=3
data_type="daily"
name=paste("lasso",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_lassos(data_type,n,r)
assign(name,use_list)
temp=get(name)
save(temp,file=paste(name,".RData",sep=""))
data_type="weekly"
name=paste("lasso",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_lassos(data_type,n,r)
assign(name,use_list)
temp=get(name)
save(temp,file=paste(name,".RData",sep=""))
}
}
i_d=which.min(mses_lasso_daily[1,])
i_w=which.min(mses_lasso_weekly[1,])
lasso_stats=function(data_type,curr_i,p){
use_data=get(paste(data_type,"_data",sep=""))[[curr_i]]
#Training x and y
train_x=use_data[which(use_data[,"S_train"]==1),"Vol"]
train_x=data.matrix(train_x[-length(train_x)])
train_y=use_data[which(use_data[,"S_train"]==1),"Vol"]
train_y=train_y[-1]
#Testing x and y
test_x=use_data[which(use_data[,"S_train"]==0),"Vol"]
test_x=data.matrix(test_x[-length(test_x)])
test_y=use_data[which(use_data[,"S_train"]==0),"Vol"]
test_y=data.matrix(test_y[-1])
#Cross validation model - we enforce strong ordering
cvmodel=timeLagLasso.cv(train_x,train_y,maxlag=p,strongly.ordered = TRUE,trace=FALSE)
lam=cvmodel$lamhat
model=timeLagLasso(train_x,train_y,lambda=lam,maxlag=p,strongly.ordered = TRUE,trace=FALSE)
pred_y=predict.timeLagLasso(model,test_x)
pred_y=pred_y$yhat.ordered[1:length(test_y)]
#Since we need to also optimize over p we return testing error and training error
return(c(min(cvmodel$cv.err),mse(pred_y,test_y)))
}
ave_lassos=function(data_type,p){
errs=sapply(seq(1,length(currencies),1),function(x){lasso_stats(data_type,x,p)})
return(rowMeans(data.matrix(errs)))
}
ps=seq(2,6,1)
mses_lasso_daily=sapply(ps,function(x){ave_lassos("daily",x)})
mses_lasso_weekly=sapply(ps,function(x){ave_lassos("weekly",x)})
#Table for presentation - we will overwrite pres_table consistently throughout
#Tables output into Latex
i_d=which.min(mses_lasso_daily[1,])
i_w=which.min(mses_lasso_weekly[1,])
p_d=ps[i_d]
p_w=ps[i_w]
train_lasso_curr=function(data_type,n_states,reg,curr_i){
#Get train first
use_data=get(paste(data_type,"_data",sep=""))[[curr_i]]
use_data=use_data[which(use_data[,"S_train"]==1),]
states=get(paste(data_type,"states",n_states,sep="_"))[[curr_i]]
use_data=cbind(use_data,states)
train=data.frame(use_data[which(use_data$states==reg),])
#Training x and y
train_x=train[,"Vol"]
train_x=data.matrix(train_x[-length(train_x)])
train_y=train[,"Vol"]
train_y=train_y[-1]
#We will still cross validate to get the optimal lambda
if(data_type=="daily"){
p_opt=p_d
}
else{
p_opt=p_w
}
cvmodel=timeLagLasso.cv(train_x,train_y,maxlag=p_opt,strongly.ordered = TRUE,trace=FALSE)
lam=cvmodel$lamhat
model=timeLagLasso(train_x,train_y,lambda=lam,maxlag=p_opt,strongly.ordered = TRUE,trace=FALSE)
return(model)
}
#Function populates all currencies for one list
populate_lassos=function(data_type,n_states,reg){
name=paste("lasso",data_type,n_states,reg,sep="_")
use_list=get(name)
for(i in 1:length(currencies)){
print(i)
use_list[[length(use_list)+1]]=train_lasso_curr(data_type,n_states,reg,i)
}
assign(name,use_list)
return(get(name))
}
#Populate all lists
setwd("~/Documents/Grad_School/2016-2017_Spring/Amin/Homework/HW_3/FIN580/final/data")
for(n in 2:3){
for(r in 1:2){
data_type="daily"
name=paste("lasso",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_lassos(data_type,n,r)
assign(name,use_list)
temp=get(name)
save(temp,file=paste(name,".RData",sep=""))
data_type="weekly"
name=paste("lasso",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_lassos(data_type,n,r)
assign(name,use_list)
temp=get(name)
save(temp,file=paste(name,".RData",sep=""))
}
if(n>2){
r=3
data_type="daily"
name=paste("lasso",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_lassos(data_type,n,r)
assign(name,use_list)
temp=get(name)
save(temp,file=paste(name,".RData",sep=""))
data_type="weekly"
name=paste("lasso",data_type,n,r,sep="_")
use_list=get(name)
use_list=populate_lassos(data_type,n,r)
assign(name,use_list)
temp=get(name)
save(temp,file=paste(name,".RData",sep=""))
}
}
get_lasso_test_error=function(data_type,n_states,reg){
mse=0
for(curr_i in 1:length(currencies)){
#Getting data
use_data=get(paste(data_type,"_data",sep=""))[[curr_i]]
test=use_data[which(use_data[,"S_train"]==0),]
states=get(paste(data_type,"test_regimes",n_states,sep="_"))[[curr_i]]
test=cbind(test,states)
test=test[which(states==reg),]
#Testing x and y
test_x=test[,"Vol"]
test_x=data.matrix(test_x[-length(test_x)])
test_y=test[,"Vol"]
test_y=data.matrix(test_y[-1])
#Getting model
model=get(paste("lasso",data_type,n_states,reg,sep="_"))[[curr_i]]
pred_y=predict.timeLagLasso(model,test_x)
pred_y=pred_y$yhat.ordered[1:length(test_y)]
mse=+mse(pred_y,test_y)
}
return(mse/7.0)
}
mses_daily_l=matrix(NA,nrow=3,ncol=2)
rownames(mses_daily_l)=c("Regime 1","Regime 2","Regime 3")
colnames(mses_daily_l)=c("No. States: 2","No. States: 3")
mses_weekly_l=matrix(NA,nrow=3,ncol=2)
rownames(mses_weekly_l)=c("Regime 1","Regime 2","Regime 3")
colnames(mses_weekly_l)=c("No. States: 2","No. States: 3")
for(n in 2:3){
for(r in 1:2){
print(paste("r:",r,"n:",n))
mses_daily_l[r,n-1]=get_lasso_test_error("daily",n,r)
mses_weekly_l[r,n-1]=get_lasso_test_error("weekly",n,r)
}
if(n>2){
print(paste("r:",r,"n:",n))
r=3
mses_daily_l[r,n-1]=get_lasso_test_error("daily",n,r)
mses_weekly_l[r,n-1]=get_lasso_test_error("weekly",n,r)
}
}
}
stargazer(mses_daily_l)
stargazer(mses_weekly_l)
lasso_stats=function(data_type,curr_i,p){
use_data=get(paste(data_type,"_data",sep=""))[[curr_i]]
#Training x and y
train_x=use_data[which(use_data[,"S_train"]==1),"Vol"]
train_x=data.matrix(train_x[-length(train_x)])
train_y=use_data[which(use_data[,"S_train"]==1),"Vol"]
train_y=train_y[-1]
#Testing x and y
test_x=use_data[which(use_data[,"S_train"]==0),"Vol"]
test_x=data.matrix(test_x[-length(test_x)])
test_y=use_data[which(use_data[,"S_train"]==0),"Vol"]
test_y=data.matrix(test_y[-1])
#Cross validation model - we enforce strong ordering
cvmodel=timeLagLasso.cv(train_x,train_y,maxlag=p,strongly.ordered = TRUE,trace=FALSE)
lam=cvmodel$lamhat
model=timeLagLasso(train_x,train_y,lambda=lam,maxlag=p,strongly.ordered = TRUE,trace=FALSE)
pred_y=predict.timeLagLasso(model,test_x)
pred_y=pred_y$yhat.ordered[1:length(test_y)]
#Since we need to also optimize over p we return testing error and training error
return(c(min(cvmodel$cv.err),mse(pred_y,test_y)))
}
ave_lassos=function(data_type,p){
errs=sapply(seq(1,length(currencies),1),function(x){lasso_stats(data_type,x,p)})
return(rowMeans(data.matrix(errs)))
}
ps=seq(2,6,1)
mses_lasso_daily=sapply(ps,function(x){ave_lassos("daily",x)})
mses_lasso_weekly=sapply(ps,function(x){ave_lassos("weekly",x)})
i_d=which.min(mses_lasso_daily[1,])
i_w=which.min(mses_lasso_weekly[1,])
pres_table=cbind(ps[i_d],ps[i_w])
pres_table=rbind(pres_table,c(mses_lasso_daily[2,i_d],mses_lasso_weekly[2,i_w]))
colnames(pres_table)=c("Daily","Weekly")
rownames(pres_table)=c("Max lag","Out of sample error")
stargazer(pres_table)
nrow(which(daily_data[[1]]$S_train==1))
t=daily_data[[1]]
(3/5)*1559
t=weekly_data[[1]]
(3/5)*310
