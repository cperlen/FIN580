x = append(x_train,x_test)
model=garchFit(formula=~garch(1,1),data=x,verbose=FALSE)
pred_y[i]=  predict(model,n.ahead=1)$standardDeviation
}
#Since we have log-vols, but the predictions arent need to change
pred_y=log(pred_y)
mse[curr_i] =  mse(pred_y,actual_vol)
}
return(mean(mse))
}
mses_daily=matrix(NA,nrow=3,ncol=2)
rownames(mses_daily)=c("Regime 1","Regime 2","Regime 3")
colnames(mses_daily)=c("No. States: 2","No. States: 3")
mses_weekly=matrix(NA,nrow=3,ncol=2)
rownames(mses_weekly)=c("Regime 1","Regime 2","Regime 3")
colnames(mses_weekly)=c("No. States: 2","No. States: 3")
for(n in 2:3){
for(r in 1:2){
print(paste("r:",r,"n:",n))
mses_daily[r,n-1]=get_garch_test_error("daily",n,r)
mses_weekly[r,n-1]=get_garch_test_error("weekly",n,r)
}
if(n>2){
print(paste("r:",r,"n:",n))
r=3
mses_daily[r,n-1]=get_garch_test_error("daily",n,r)
mses_weekly[r,n-1]=get_garch_test_error("weekly",n,r)
}
}
mses_daily=matrix(NA,nrow=3,ncol=2)
rownames(mses_daily)=c("Regime 1","Regime 2","Regime 3")
colnames(mses_daily)=c("No. States: 2","No. States: 3")
mses_weekly=matrix(NA,nrow=3,ncol=2)
rownames(mses_weekly)=c("Regime 1","Regime 2","Regime 3")
colnames(mses_weekly)=c("No. States: 2","No. States: 3")
for(n in 2:3){
#for(r in 1:2){
# print(paste("r:",r,"n:",n))
#  mses_daily[r,n-1]=get_garch_test_error("daily",n,r)
#  mses_weekly[r,n-1]=get_garch_test_error("weekly",n,r)
#}
#if(n>2){
#  print(paste("r:",r,"n:",n))
#  r=3
mses_daily[r,n-1]=get_garch_test_error("daily",n)#,r)
mses_weekly[r,n-1]=get_garch_test_error("weekly",n)#,r)
}
#}
mses_daily
mses_weekly
load("Weekly_test_regimes_2.RData")
load("Weekly_test_regimes_3.RData")
load("Daily_test_regimes_2.RData")
load("Daily_test_regimes_3.RData")
load("Weekly_test_regimes_2.RData")
load("Weekly_test_regimes_3.RData")
load("Daily_states_train_2.RData")
load("Weekly_states_train_2.RData")
load("Daily_states_train_3.RData")
load("Weekly_states_train_3.RData")
setwd("~/Desktop/FIN580_Final")
get_garch_test_error=function(data_type,n_states){
mse=  rep(0,length(currencies))
for(curr_i in 1:length(currencies)){
#Getting data
use_data=get(paste(data_type,"_data",sep=""))[[curr_i]]
train_ret=use_data[which(use_data[,"S_train"]==1),"Ret"]
test_ret = use_data[which(use_data[,"S_train"]==0),"Ret"]
actual_vol= use_data[which(use_data[,"S_train"]==0),"Target"]
#set up state train and test
states=get(paste(data_type,"states",n_states,sep="_"))[[curr_i]]
train = cbind(train_ret,states)
states=get(paste(data_type,"test_regimes",n_states,sep="_"))[[curr_i]]
test = cbind(test_ret,states)
pred_y = rep(0,length(test_ret))
for(i in 1:length(test_ret)){
reg = test[i,2]
x_train = train[which(train[,2] == reg),1]
x_test =  test[which(train[1:i,2] == reg),1]
x = append(x_train,x_test)
model=garchFit(formula=~garch(1,1),data=x,verbose=FALSE)
pred_y[i]=  predict(model,n.ahead=1)$standardDeviation
}
#Since we have log-vols, but the predictions arent need to change
pred_y=log(pred_y)
mse[curr_i] =  mse(pred_y,actual_vol)
}
return(mean(mse))
}
mses_daily=matrix(NA,nrow=3,ncol=2)
rownames(mses_daily)=c("Regime 1","Regime 2","Regime 3")
colnames(mses_daily)=c("No. States: 2","No. States: 3")
mses_weekly=matrix(NA,nrow=3,ncol=2)
rownames(mses_weekly)=c("Regime 1","Regime 2","Regime 3")
colnames(mses_weekly)=c("No. States: 2","No. States: 3")
for(n in 2:3){
#for(r in 1:2){
# print(paste("r:",r,"n:",n))
#  mses_daily[r,n-1]=get_garch_test_error("daily",n,r)
#  mses_weekly[r,n-1]=get_garch_test_error("weekly",n,r)
#}
#if(n>2){
#  print(paste("r:",r,"n:",n))
#  r=3
mses_daily[r,n-1]=get_garch_test_error("daily",n)#,r)
mses_weekly[r,n-1]=get_garch_test_error("weekly",n)#,r)
}
#}
warnings()
data_type = 'weekly'
n_states = 2
curr_i = 1
use_data=get(paste(data_type,"_data",sep=""))[[curr_i]]
train_ret=use_data[which(use_data[,"S_train"]==1),"Ret"]
test_ret = use_data[which(use_data[,"S_train"]==0),"Ret"]
actual_vol= use_data[which(use_data[,"S_train"]==0),"Target"]
states=get(paste(data_type,"states",n_states,sep="_"))[[curr_i]]
train = cbind(train_ret,states)
states=get(paste(data_type,"test_regimes",n_states,sep="_"))[[curr_i]]
test = cbind(test_ret,states)
train
test
pred_y = rep(0,length(test_ret))
i = 1
reg = test[i,2]
reg
x_train = train[which(train[,2] == reg),1]
x_train
x_test =  test[which(train[1:i,2] == reg),1]
x_test
x = append(x_train,x_test)
x
x_test =  test[which(train[1:i,2] == reg),1][1]
x_test
model=garchFit(formula=~garch(1,1),data=x,verbose=FALSE)
pred_y[i]=  predict(model,n.ahead=1)$standardDeviation
pred_y
actual_vol
log(pred_y[1])
i = length(test_ret)
reg = test[i,2]
x_train = train[which(train[,2] == reg),1]
x_test =  test[which(train[1:i,2] == reg),1]
x = append(x_train,x_test)
model=garchFit(formula=~garch(1,1),data=x,verbose=FALSE)
pred_y[i]=  predict(model,n.ahead=1)$standardDeviation
curr_i = 2
use_data=get(paste(data_type,"_data",sep=""))[[curr_i]]
train_ret=use_data[which(use_data[,"S_train"]==1),"Ret"]
test_ret = use_data[which(use_data[,"S_train"]==0),"Ret"]
actual_vol= use_data[which(use_data[,"S_train"]==0),"Target"]
#set up state train and test
states=get(paste(data_type,"states",n_states,sep="_"))[[curr_i]]
train = cbind(train_ret,states)
states=get(paste(data_type,"test_regimes",n_states,sep="_"))[[curr_i]]
test = cbind(test_ret,states)
pred_y = rep(0,length(test_ret))
for(i in 1:length(test_ret)){
}
i = length(test_ret)
reg = test[i,2]
x_train = train[which(train[,2] == reg),1]
x_test =  test[which(train[1:i,2] == reg),1]
x = append(x_train,x_test)
model=garchFit(formula=~garch(1,1),data=x,verbose=FALSE)
pred_y[i]=  predict(model,n.ahead=1)$standardDeviation
pred_y
curr_i = 3
use_data=get(paste(data_type,"_data",sep=""))[[curr_i]]
train_ret=use_data[which(use_data[,"S_train"]==1),"Ret"]
test_ret = use_data[which(use_data[,"S_train"]==0),"Ret"]
actual_vol= use_data[which(use_data[,"S_train"]==0),"Target"]
#set up state train and test
states=get(paste(data_type,"states",n_states,sep="_"))[[curr_i]]
train = cbind(train_ret,states)
states=get(paste(data_type,"test_regimes",n_states,sep="_"))[[curr_i]]
test = cbind(test_ret,states)
pred_y = rep(0,length(test_ret))
i = length(test_ret)
reg = test[i,2]
x_train = train[which(train[,2] == reg),1]
x_test =  test[which(train[1:i,2] == reg),1]
x = append(x_train,x_test)
model=garchFit(formula=~garch(1,1),data=x,verbose=FALSE)
pred_y[i]=  predict(model,n.ahead=1)$standardDeviation
curr_i = 4
use_data=get(paste(data_type,"_data",sep=""))[[curr_i]]
train_ret=use_data[which(use_data[,"S_train"]==1),"Ret"]
test_ret = use_data[which(use_data[,"S_train"]==0),"Ret"]
actual_vol= use_data[which(use_data[,"S_train"]==0),"Target"]
#set up state train and test
states=get(paste(data_type,"states",n_states,sep="_"))[[curr_i]]
train = cbind(train_ret,states)
states=get(paste(data_type,"test_regimes",n_states,sep="_"))[[curr_i]]
test = cbind(test_ret,states)
pred_y = rep(0,length(test_ret))
for(i in 1:length(test_ret)){
i = length(test_ret)
reg = test[i,2]
x_train = train[which(train[,2] == reg),1]
dfasdf
}
data_type = 'weekly'
n_states = 3
use_data=get(paste(data_type,"_data",sep=""))[[curr_i]]
train_ret=use_data[which(use_data[,"S_train"]==1),"Ret"]
test_ret = use_data[which(use_data[,"S_train"]==0),"Ret"]
actual_vol= use_data[which(use_data[,"S_train"]==0),"Target"]
#set up state train and test
states=get(paste(data_type,"states",n_states,sep="_"))[[curr_i]]
train = cbind(train_ret,states)
states=get(paste(data_type,"test_regimes",n_states,sep="_"))[[curr_i]]
test = cbind(test_ret,states)
pred_y = rep(0,length(test_ret))
View(test)
#Get testing error - average over all currencies
get_garch_test_error=function(data_type,n_states){
mse=  rep(0,length(currencies))
for(curr_i in 1:length(currencies)){
#Getting data
use_data=get(paste(data_type,"_data",sep=""))[[curr_i]]
train_ret=use_data[which(use_data[,"S_train"]==1),"Ret"]
test_ret = use_data[which(use_data[,"S_train"]==0),"Ret"]
actual_vol= use_data[which(use_data[,"S_train"]==0),"Target"]
#set up state train and test
states=get(paste(data_type,"states",n_states,sep="_"))[[curr_i]]
train = cbind(train_ret,states)
states=get(paste(data_type,"test_regimes",n_states,sep="_"))[[curr_i]]
test = cbind(test_ret,states)
pred_y = rep(0,length(test_ret))
for(i in 1:length(test_ret)){
i = length(test_ret)
reg = test[i,2]
x_train = train[which(train[,2] == reg),1]
x_test =  test[which(train[1:i,2] == reg),1]
x = append(x_train,x_test)
model=garchFit(formula=~garch(1,1),data=x,verbose=FALSE)
pred_y[i]=  predict(model,n.ahead=1)$standardDeviation
}
#Since we have log-vols, but the predictions arent need to change
pred_y=log(pred_y)
mse[curr_i] =  mse(pred_y,actual_vol)
}
return(mse)
}
mses_daily=matrix(NA,nrow=2,ncol=length(currencies))
#rownames(mses_daily)=c("Regime 1","Regime 2","Regime 3")
#colnames(mses_daily)=c("No. States: 2","No. States: 3")
mses_weekly=matrix(NA,nrow=2,ncol=length(currencies))
#rownames(mses_weekly)=c("Regime 1","Regime 2","Regime 3")
#colnames(mses_weekly)=c("No. States: 2","No. States: 3")
for(n in 2:3){
#for(r in 1:2){
# print(paste("r:",r,"n:",n))
#  mses_daily[r,n-1]=get_garch_test_error("daily",n,r)
#  mses_weekly[r,n-1]=get_garch_test_error("weekly",n,r)
#}
#if(n>2){
#  print(paste("r:",r,"n:",n))
#  r=3
mses_daily[n-1,]=get_garch_test_error("daily",n)#,r)
mses_weekly[n-1,]=get_garch_test_error("weekly",n)#,r)
}
#}
n = 2
mses_weekly[n-1,]=get_garch_test_error("weekly",n)#,r)
mse_weekly
mses_weekly
get_garch_test_error("weekly",n)
#Get testing error - average over all currencies
get_garch_test_error=function(data_type,n_states){
mse=  rep(0,length(currencies))
for(curr_i in 1:length(currencies)){
#Getting data
use_data=get(paste(data_type,"_data",sep=""))[[curr_i]]
train_ret=use_data[which(use_data[,"S_train"]==1),"Ret"]
test_ret = use_data[which(use_data[,"S_train"]==0),"Ret"]
actual_vol= use_data[which(use_data[,"S_train"]==0),"Target"]
#set up state train and test
states=get(paste(data_type,"states",n_states,sep="_"))[[curr_i]]
train = cbind(train_ret,states)
states=get(paste(data_type,"test_regimes",n_states,sep="_"))[[curr_i]]
test = cbind(test_ret,states)
pred_y = rep(0,length(test_ret))
for(i in 1:length(test_ret)){
i = length(test_ret)
reg = test[i,2]
x_train = train[which(train[,2] == reg),1]
x_test =  test[which(train[1:i,2] == reg),1]
x = append(x_train,x_test)
model=garchFit(formula=~garch(1,1),data=x,verbose=FALSE)
pred_y[i]=  predict(model,n.ahead=1)$standardDeviation
}
#Since we have log-vols, but the predictions arent need to change
pred_y=log(pred_y)
mse[curr_i] =  mse(pred_y,actual_vol)
}
print(pred_y)
return(mse)
}
get_garch_test_error("weekly",n)#,r)
n_states = 2
data_type = 'weekly'
mse=  rep(0,length(currencies))
curr_i = 1
use_data=get(paste(data_type,"_data",sep=""))[[curr_i]]
train_ret=use_data[which(use_data[,"S_train"]==1),"Ret"]
test_ret = use_data[which(use_data[,"S_train"]==0),"Ret"]
actual_vol= use_data[which(use_data[,"S_train"]==0),"Target"]
states=get(paste(data_type,"states",n_states,sep="_"))[[curr_i]]
train = cbind(train_ret,states)
states=get(paste(data_type,"test_regimes",n_states,sep="_"))[[curr_i]]
test = cbind(test_ret,states)
train
curr_i = length(currencies)
use_data=get(paste(data_type,"_data",sep=""))[[curr_i]]
train_ret=use_data[which(use_data[,"S_train"]==1),"Ret"]
test_ret = use_data[which(use_data[,"S_train"]==0),"Ret"]
actual_vol= use_data[which(use_data[,"S_train"]==0),"Target"]
#set up state train and test
states=get(paste(data_type,"states",n_states,sep="_"))[[curr_i]]
train = cbind(train_ret,states)
states=get(paste(data_type,"test_regimes",n_states,sep="_"))[[curr_i]]
test = cbind(test_ret,states)
test
train
pred_y = rep(0,length(test_ret))
#Get testing error - average over all currencies
get_garch_test_error=function(data_type,n_states){
mse=  rep(0,length(currencies))
for(curr_i in 1:length(currencies)){
#Getting data
curr_i = length(currencies)
use_data=get(paste(data_type,"_data",sep=""))[[curr_i]]
train_ret=use_data[which(use_data[,"S_train"]==1),"Ret"]
test_ret = use_data[which(use_data[,"S_train"]==0),"Ret"]
actual_vol= use_data[which(use_data[,"S_train"]==0),"Target"]
#set up state train and test
states=get(paste(data_type,"states",n_states,sep="_"))[[curr_i]]
train = cbind(train_ret,states)
states=get(paste(data_type,"test_regimes",n_states,sep="_"))[[curr_i]]
test = cbind(test_ret,states)
pred_y = rep(0,length(test_ret))
for(i in 1:length(test_ret)){
reg = test[i,2]
x_train = train[which(train[,2] == reg),1]
x_test =  test[which(train[1:i,2] == reg),1]
x = append(x_train,x_test)
model=garchFit(formula=~garch(1,1),data=x,verbose=FALSE)
pred_y[i]=  predict(model,n.ahead=1)$standardDeviation
}
#Since we have log-vols, but the predictions arent need to change
pred_y=log(pred_y)
mse[curr_i] =  mse(pred_y,actual_vol)
}
return(mse)
}
mses_daily=matrix(NA,nrow=2,ncol=length(currencies))
#rownames(mses_daily)=c("Regime 1","Regime 2","Regime 3")
#colnames(mses_daily)=c("No. States: 2","No. States: 3")
mses_weekly=matrix(NA,nrow=2,ncol=length(currencies))
#rownames(mses_weekly)=c("Regime 1","Regime 2","Regime 3")
#colnames(mses_weekly)=c("No. States: 2","No. States: 3")
for(n in 2:3){
n = 2
#for(r in 1:2){
# print(paste("r:",r,"n:",n))
#  mses_daily[r,n-1]=get_garch_test_error("daily",n,r)
#  mses_weekly[r,n-1]=get_garch_test_error("weekly",n,r)
#}
#if(n>2){
#  print(paste("r:",r,"n:",n))
#  r=3
mses_daily[n-1,]=get_garch_test_error("daily",n)#,r)
mses_weekly[n-1,]=get_garch_test_error("weekly",n)#,r)
}
get_garch_test_error=function(data_type,n_states){
mse=  rep(0,length(currencies))
for(curr_i in 1:length(currencies)){
#Getting data
curr_i = length(currencies)
use_data=get(paste(data_type,"_data",sep=""))[[curr_i]]
train_ret=use_data[which(use_data[,"S_train"]==1),"Ret"]
test_ret = use_data[which(use_data[,"S_train"]==0),"Ret"]
actual_vol= use_data[which(use_data[,"S_train"]==0),"Target"]
#set up state train and test
states=get(paste(data_type,"states",n_states,sep="_"))[[curr_i]]
train = cbind(train_ret,states)
states=get(paste(data_type,"test_regimes",n_states,sep="_"))[[curr_i]]
test = cbind(test_ret,states)
pred_y = rep(0,length(test_ret))
for(i in 1:length(test_ret)){
reg = test[i,2]
x_train = train[which(train[,2] == reg),1]
x_test =  test[which(train[1:i,2] == reg),1]
x = append(x_train,x_test)
model=garchFit(formula=~garch(1,1),data=x,verbose=FALSE)
pred_y[i]=  predict(model,n.ahead=1)$standardDeviation
}
#Since we have log-vols, but the predictions arent need to change
pred_y=log(pred_y)
mse[curr_i] =  mse(pred_y,actual_vol)
}
return(mse)
}
n = 2
mses_weekly[n-1,]=get_garch_test_error("weekly",n)#,r)
mses_weekly
warnings()
#Get testing error - average over all currencies
get_garch_test_error=function(data_type,n_states){
mse=  rep(0,length(currencies))
for(curr_i in 1:length(currencies)){
#Getting data
use_data=get(paste(data_type,"_data",sep=""))[[curr_i]]
train_ret=use_data[which(use_data[,"S_train"]==1),"Ret"]
test_ret = use_data[which(use_data[,"S_train"]==0),"Ret"]
actual_vol= use_data[which(use_data[,"S_train"]==0),"Target"]
#set up state train and test
states=get(paste(data_type,"states",n_states,sep="_"))[[curr_i]]
train = cbind(train_ret,states)
states=get(paste(data_type,"test_regimes",n_states,sep="_"))[[curr_i]]
test = cbind(test_ret,states)
pred_y = rep(0,length(test_ret))
for(i in 1:length(test_ret)){
reg = test[i,2]
x_train = train[which(train[,2] == reg),1]
x_test =  test[which(train[1:i,2] == reg),1]
x = append(x_train,x_test)
model=garchFit(formula=~garch(1,1),data=x,verbose=FALSE)
pred_y[i]=  predict(model,n.ahead=1)$standardDeviation
}
#Since we have log-vols, but the predictions arent need to change
pred_y=log(pred_y)
mse[curr_i] =  mse(pred_y,actual_vol)
}
return(mse)
}
mses_weekly[n-1,]=get_garch_test_error("weekly",n)#,r)
mses_weekly[n-1,]
mses_daily=matrix(NA,nrow=2,ncol=length(currencies))
#rownames(mses_daily)=c("Regime 1","Regime 2","Regime 3")
#colnames(mses_daily)=c("No. States: 2","No. States: 3")
mses_weekly=matrix(NA,nrow=2,ncol=length(currencies))
#rownames(mses_weekly)=c("Regime 1","Regime 2","Regime 3")
#colnames(mses_weekly)=c("No. States: 2","No. States: 3")
for(n in 2:3){
#for(r in 1:2){
# print(paste("r:",r,"n:",n))
#  mses_daily[r,n-1]=get_garch_test_error("daily",n,r)
#  mses_weekly[r,n-1]=get_garch_test_error("weekly",n,r)
#}
#if(n>2){
#  print(paste("r:",r,"n:",n))
#  r=3
mses_daily[n-1,]=get_garch_test_error("daily",n)#,r)
mses_weekly[n-1,]=get_garch_test_error("weekly",n)#,r)
}
#}
mses_daily
mses_weekly
mse_garch_all_daily
mse_garch_regime_daily = mses_daily
mse_garch_regime_weekly = mses_weekly
mse_garch_all_daily
mse_garch_regime_daily
mse_garch_regime_weekly
mse_garch_all_weekly
rand_walk = function(data){
tr_indicies = which(data$S_train == 1)
test_indicies = which(data$S_train == 0)
tr_mse = rep(0,length(currencies))
test_mse = rep(0,length(currencies))
for(curr in 1:length(currencies)){
vols = data[[curr]]$Vol
next_vol = data[[curr]]$Target
in_train = data[[curr]]$S_train
num_train = 0
num_test = 0
for(i in 1:length(vols)){
if(in_train[i] == 1){
tr_mse[curr] =  tr_mse[curr] + (vols[i] - next_vol[i])^2
num_train = num_train + 1
}
else{
test_mse[curr] =  test_mse[curr] + (vols[i] - next_vol[i])^2
num_test = num_test + 1
}
}
tr_mse[curr] = tr_mse[curr] / num_train
test_mse[curr] = test_mse[curr] / num_test
}
return(c(mean(tr_mse),mean(test_mse)))
}
daily_rw = rand_walk(daily_data)
weekly_rw = rand_walk(weekly_data)
rw_mse = matrix(nrow = 2, ncol = 2)
colnames(rw_mse) = c('Train','Test')
rownames(rw_mse) = c('Daily','Weekly')
rw_mse[1,] = daily_rw
rw_mse[2,] = weekly_rw
rw_mse
mse_garch_all_daily
mse_garch_all_weekly
mses_lasso_daily
mses_lasso_weekly
rownames(mses_daily) = c('2 states','3 states')
colnames(mses_daily) = currencies
rownames(mses_weekly) = c('2 states','3 states')
colnames(mses_weekly) = currencies
stargazer(mses_daily)
stargazer(mses_weekly)
